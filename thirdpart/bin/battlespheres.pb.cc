// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battlespheres.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "battlespheres.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace battlespheresproto {
class SkillInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SkillInfo> {
} _SkillInfo_default_instance_;
class WeaponPropertyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponProperty> {
} _WeaponProperty_default_instance_;
class WeaponInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponInfo> {
} _WeaponInfo_default_instance_;
class MissionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MissionInfo> {
} _MissionInfo_default_instance_;
class MissionProgressInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MissionProgressInfo> {
} _MissionProgressInfo_default_instance_;
class GameUserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameUserInfo> {
} _GameUserInfo_default_instance_;
class WeaponInfosDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponInfos> {
} _WeaponInfos_default_instance_;
class SkillInfosDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SkillInfos> {
} _SkillInfos_default_instance_;
class MissionInfosDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MissionInfos> {
} _MissionInfos_default_instance_;
class UserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserInfo> {
} _UserInfo_default_instance_;
class LoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginReq> {
} _LoginReq_default_instance_;
class LoginRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginRsp> {
} _LoginRsp_default_instance_;
class CreateRoleReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateRoleReq> {
} _CreateRoleReq_default_instance_;
class CreateRoleRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateRoleRsp> {
} _CreateRoleRsp_default_instance_;
class LoadUserDataRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoadUserDataRsp> {
} _LoadUserDataRsp_default_instance_;
class PlayerStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerStatus> {
} _PlayerStatus_default_instance_;
class RoomPlayerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerInfo> {
} _RoomPlayerInfo_default_instance_;
class DismissRoomEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DismissRoomEvent> {
} _DismissRoomEvent_default_instance_;
class JoinRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomReq> {
} _JoinRoomReq_default_instance_;
class JoinRoomRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomRsp> {
} _JoinRoomRsp_default_instance_;
class JoinRoomEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomEvent> {
} _JoinRoomEvent_default_instance_;
class QuitRoomReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitRoomReq> {
} _QuitRoomReq_default_instance_;
class QuitRoomRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitRoomRsp> {
} _QuitRoomRsp_default_instance_;
class QuitRoomEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitRoomEvent> {
} _QuitRoomEvent_default_instance_;
class BuyBuffReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BuyBuffReq> {
} _BuyBuffReq_default_instance_;
class BuyBuffRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BuyBuffRsp> {
} _BuyBuffRsp_default_instance_;
class WeaponBuyReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponBuyReq> {
} _WeaponBuyReq_default_instance_;
class WeaponBuyRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponBuyRsp> {
} _WeaponBuyRsp_default_instance_;
class WeaponEquipInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponEquipInfo> {
} _WeaponEquipInfo_default_instance_;
class WeaponEquipReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponEquipReq> {
} _WeaponEquipReq_default_instance_;
class WeaponEquipRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponEquipRsp> {
} _WeaponEquipRsp_default_instance_;
class SkillUpgradeReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SkillUpgradeReq> {
} _SkillUpgradeReq_default_instance_;
class SkillUpgradeRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SkillUpgradeRsp> {
} _SkillUpgradeRsp_default_instance_;
class FindFBReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FindFBReq> {
} _FindFBReq_default_instance_;
class FindFBRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FindFBRsp> {
} _FindFBRsp_default_instance_;
class InvitationReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InvitationReq> {
} _InvitationReq_default_instance_;
class InvitationRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InvitationRsp> {
} _InvitationRsp_default_instance_;
class InvitationAnswerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InvitationAnswerReq> {
} _InvitationAnswerReq_default_instance_;
class InvitationAnswerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InvitationAnswerRsp> {
} _InvitationAnswerRsp_default_instance_;
class BattleResultReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BattleResultReq> {
} _BattleResultReq_default_instance_;
class BattleResultRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BattleResultRsp> {
} _BattleResultRsp_default_instance_;

namespace protobuf_battlespheres_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[41];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponProperty, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponProperty, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfo, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfo, weapon_properties_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, receivedtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, postion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionProgressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionProgressInfo, missiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionProgressInfo, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionProgressInfo, expiretime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, coin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strskillinfos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strweaponinfos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strprogress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strmissioninfos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfos, weapon_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfos, skill_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfos, mission_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, coin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, skill_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, weapon_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, mission_progress_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, mission_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleReq, roleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleReq, nickname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleRsp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadUserDataRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadUserDataRsp, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, isonline_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerInfo, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerInfo, weapon_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismissRoomEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismissRoomEvent, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomReq, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomReq, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomReq, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomReq, private__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomReq, weapon_infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomRsp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomRsp, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomRsp, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomRsp, owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomRsp, other_players_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomEvent, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRoomReq, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRoomRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRoomRsp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRoomEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitRoomEvent, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBuffReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBuffReq, buff_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBuffRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBuffRsp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponBuyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponBuyReq, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponBuyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponBuyRsp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponBuyRsp, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponEquipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponEquipInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponEquipInfo, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponEquipReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponEquipReq, infos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponEquipRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponEquipRsp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponEquipRsp, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeReq, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeReq, next_lv_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeRsp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeRsp, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFBReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFBReq, fb_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFBRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFBRsp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFBRsp, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationReq, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationRsp, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAnswerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAnswerReq, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAnswerReq, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAnswerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationAnswerRsp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultReq, killcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultReq, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultRsp, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultRsp, info_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SkillInfo)},
  { 7, -1, sizeof(WeaponProperty)},
  { 14, -1, sizeof(WeaponInfo)},
  { 22, -1, sizeof(MissionInfo)},
  { 30, -1, sizeof(MissionProgressInfo)},
  { 38, -1, sizeof(GameUserInfo)},
  { 54, -1, sizeof(WeaponInfos)},
  { 60, -1, sizeof(SkillInfos)},
  { 66, -1, sizeof(MissionInfos)},
  { 72, -1, sizeof(UserInfo)},
  { 87, -1, sizeof(LoginReq)},
  { 93, -1, sizeof(LoginRsp)},
  { 100, -1, sizeof(CreateRoleReq)},
  { 107, -1, sizeof(CreateRoleRsp)},
  { 113, -1, sizeof(LoadUserDataRsp)},
  { 119, -1, sizeof(PlayerStatus)},
  { 126, -1, sizeof(RoomPlayerInfo)},
  { 134, -1, sizeof(DismissRoomEvent)},
  { 140, -1, sizeof(JoinRoomReq)},
  { 150, -1, sizeof(JoinRoomRsp)},
  { 160, -1, sizeof(JoinRoomEvent)},
  { 166, -1, sizeof(QuitRoomReq)},
  { 172, -1, sizeof(QuitRoomRsp)},
  { 178, -1, sizeof(QuitRoomEvent)},
  { 184, -1, sizeof(BuyBuffReq)},
  { 190, -1, sizeof(BuyBuffRsp)},
  { 196, -1, sizeof(WeaponBuyReq)},
  { 202, -1, sizeof(WeaponBuyRsp)},
  { 209, -1, sizeof(WeaponEquipInfo)},
  { 216, -1, sizeof(WeaponEquipReq)},
  { 222, -1, sizeof(WeaponEquipRsp)},
  { 229, -1, sizeof(SkillUpgradeReq)},
  { 236, -1, sizeof(SkillUpgradeRsp)},
  { 243, -1, sizeof(FindFBReq)},
  { 249, -1, sizeof(FindFBRsp)},
  { 256, -1, sizeof(InvitationReq)},
  { 262, -1, sizeof(InvitationRsp)},
  { 268, -1, sizeof(InvitationAnswerReq)},
  { 275, -1, sizeof(InvitationAnswerRsp)},
  { 281, -1, sizeof(BattleResultReq)},
  { 288, -1, sizeof(BattleResultRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SkillInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MissionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MissionProgressInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameUserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponInfos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SkillInfos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MissionInfos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRoleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRoleRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoadUserDataRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DismissRoomEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinRoomRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinRoomEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitRoomRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitRoomEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BuyBuffReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BuyBuffRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponBuyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponBuyRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponEquipInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponEquipReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponEquipRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SkillUpgradeReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SkillUpgradeRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FindFBReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FindFBRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InvitationReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InvitationRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InvitationAnswerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InvitationAnswerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattleResultReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattleResultRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "battlespheres.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 41);
}

}  // namespace

void TableStruct::Shutdown() {
  _SkillInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _WeaponProperty_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _WeaponInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MissionInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _MissionProgressInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GameUserInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _WeaponInfos_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SkillInfos_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _MissionInfos_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _UserInfo_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _LoginReq_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _LoginRsp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CreateRoleReq_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CreateRoleRsp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _LoadUserDataRsp_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _PlayerStatus_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _RoomPlayerInfo_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _DismissRoomEvent_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _JoinRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _JoinRoomRsp_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _JoinRoomEvent_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _QuitRoomReq_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _QuitRoomRsp_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _QuitRoomEvent_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _BuyBuffReq_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _BuyBuffRsp_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _WeaponBuyReq_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _WeaponBuyRsp_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _WeaponEquipInfo_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _WeaponEquipReq_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _WeaponEquipRsp_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _SkillUpgradeReq_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _SkillUpgradeRsp_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _FindFBReq_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _FindFBRsp_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _InvitationReq_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _InvitationRsp_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _InvitationAnswerReq_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _InvitationAnswerRsp_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _BattleResultReq_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _BattleResultRsp_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SkillInfo_default_instance_.DefaultConstruct();
  _WeaponProperty_default_instance_.DefaultConstruct();
  _WeaponInfo_default_instance_.DefaultConstruct();
  _MissionInfo_default_instance_.DefaultConstruct();
  _MissionProgressInfo_default_instance_.DefaultConstruct();
  _GameUserInfo_default_instance_.DefaultConstruct();
  _WeaponInfos_default_instance_.DefaultConstruct();
  _SkillInfos_default_instance_.DefaultConstruct();
  _MissionInfos_default_instance_.DefaultConstruct();
  _UserInfo_default_instance_.DefaultConstruct();
  _LoginReq_default_instance_.DefaultConstruct();
  _LoginRsp_default_instance_.DefaultConstruct();
  _CreateRoleReq_default_instance_.DefaultConstruct();
  _CreateRoleRsp_default_instance_.DefaultConstruct();
  _LoadUserDataRsp_default_instance_.DefaultConstruct();
  _PlayerStatus_default_instance_.DefaultConstruct();
  _RoomPlayerInfo_default_instance_.DefaultConstruct();
  _DismissRoomEvent_default_instance_.DefaultConstruct();
  _JoinRoomReq_default_instance_.DefaultConstruct();
  _JoinRoomRsp_default_instance_.DefaultConstruct();
  _JoinRoomEvent_default_instance_.DefaultConstruct();
  _QuitRoomReq_default_instance_.DefaultConstruct();
  _QuitRoomRsp_default_instance_.DefaultConstruct();
  _QuitRoomEvent_default_instance_.DefaultConstruct();
  _BuyBuffReq_default_instance_.DefaultConstruct();
  _BuyBuffRsp_default_instance_.DefaultConstruct();
  _WeaponBuyReq_default_instance_.DefaultConstruct();
  _WeaponBuyRsp_default_instance_.DefaultConstruct();
  _WeaponEquipInfo_default_instance_.DefaultConstruct();
  _WeaponEquipReq_default_instance_.DefaultConstruct();
  _WeaponEquipRsp_default_instance_.DefaultConstruct();
  _SkillUpgradeReq_default_instance_.DefaultConstruct();
  _SkillUpgradeRsp_default_instance_.DefaultConstruct();
  _FindFBReq_default_instance_.DefaultConstruct();
  _FindFBRsp_default_instance_.DefaultConstruct();
  _InvitationReq_default_instance_.DefaultConstruct();
  _InvitationRsp_default_instance_.DefaultConstruct();
  _InvitationAnswerReq_default_instance_.DefaultConstruct();
  _InvitationAnswerRsp_default_instance_.DefaultConstruct();
  _BattleResultReq_default_instance_.DefaultConstruct();
  _BattleResultRsp_default_instance_.DefaultConstruct();
  _UserInfo_default_instance_.get_mutable()->mission_progress_info_ = const_cast< ::battlespheresproto::MissionProgressInfo*>(
      ::battlespheresproto::MissionProgressInfo::internal_default_instance());
  _LoadUserDataRsp_default_instance_.get_mutable()->info_ = const_cast< ::battlespheresproto::UserInfo*>(
      ::battlespheresproto::UserInfo::internal_default_instance());
  _JoinRoomEvent_default_instance_.get_mutable()->info_ = const_cast< ::battlespheresproto::RoomPlayerInfo*>(
      ::battlespheresproto::RoomPlayerInfo::internal_default_instance());
  _WeaponBuyRsp_default_instance_.get_mutable()->info_ = const_cast< ::battlespheresproto::UserInfo*>(
      ::battlespheresproto::UserInfo::internal_default_instance());
  _WeaponEquipRsp_default_instance_.get_mutable()->info_ = const_cast< ::battlespheresproto::UserInfo*>(
      ::battlespheresproto::UserInfo::internal_default_instance());
  _SkillUpgradeRsp_default_instance_.get_mutable()->info_ = const_cast< ::battlespheresproto::UserInfo*>(
      ::battlespheresproto::UserInfo::internal_default_instance());
  _FindFBRsp_default_instance_.get_mutable()->info_ = const_cast< ::battlespheresproto::RoomPlayerInfo*>(
      ::battlespheresproto::RoomPlayerInfo::internal_default_instance());
  _InvitationRsp_default_instance_.get_mutable()->info_ = const_cast< ::battlespheresproto::RoomPlayerInfo*>(
      ::battlespheresproto::RoomPlayerInfo::internal_default_instance());
  _BattleResultRsp_default_instance_.get_mutable()->info_ = const_cast< ::battlespheresproto::UserInfo*>(
      ::battlespheresproto::UserInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023battlespheres.proto\022\022battlespheresprot"
      "o\"&\n\tSkillInfo\022\n\n\002id\030\001 \001(\005\022\r\n\005level\030\002 \001("
      "\005\"+\n\016WeaponProperty\022\n\n\002id\030\001 \001(\005\022\r\n\005value"
      "\030\002 \001(\002\"f\n\nWeaponInfo\022\n\n\002id\030\001 \001(\005\022\r\n\005inde"
      "x\030\002 \001(\005\022=\n\021weapon_properties\030\003 \003(\0132\".bat"
      "tlespheresproto.WeaponProperty\"@\n\013Missio"
      "nInfo\022\n\n\002id\030\001 \001(\005\022\024\n\014receivedTime\030\002 \001(\005\022"
      "\017\n\007postion\030\003 \001(\005\"P\n\023MissionProgressInfo\022"
      "\023\n\013missionType\030\001 \001(\005\022\020\n\010progress\030\002 \001(\005\022\022"
      "\n\nexpireTime\030\003 \001(\005\"\327\001\n\014GameUserInfo\022\017\n\007u"
      "ser_id\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\014\022\017\n\007role_i"
      "d\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005\022\014\n\004coin\030\005 \001(\005\022\013\n\003e"
      "xp\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\022\025\n\rstrSkillInfos"
      "\030\025 \001(\014\022\026\n\016strWeaponInfos\030\026 \001(\014\022\023\n\013strpro"
      "gress\030\027 \001(\014\022\027\n\017strMissionInfos\030\030 \001(\014\"C\n\013"
      "WeaponInfos\0224\n\014weapon_infos\030\001 \003(\0132\036.batt"
      "lespheresproto.WeaponInfo\"@\n\nSkillInfos\022"
      "2\n\013skill_infos\030\001 \003(\0132\035.battlespheresprot"
      "o.SkillInfo\"F\n\014MissionInfos\0226\n\rmission_i"
      "nfos\030\001 \003(\0132\037.battlespheresproto.MissionI"
      "nfo\"\321\002\n\010UserInfo\022\017\n\007user_id\030\001 \001(\005\022\020\n\010nic"
      "kname\030\003 \001(\014\022\017\n\007role_id\030\004 \001(\005\022\014\n\004rank\030\021 \001"
      "(\005\022\014\n\004coin\030\022 \001(\005\022\013\n\003exp\030\023 \001(\005\0222\n\013skill_i"
      "nfos\030\025 \003(\0132\035.battlespheresproto.SkillInf"
      "o\0224\n\014weapon_infos\030\026 \003(\0132\036.battlespheresp"
      "roto.WeaponInfo\022F\n\025mission_progress_info"
      "\030\037 \001(\0132\'.battlespheresproto.MissionProgr"
      "essInfo\0226\n\rmission_infos\030  \003(\0132\037.battles"
      "pheresproto.MissionInfo\"\031\n\010LoginReq\022\r\n\005t"
      "oken\030\001 \001(\t\"-\n\010LoginRsp\022\016\n\006result\030\001 \001(\005\022\021"
      "\n\ttimestamp\030\002 \001(\005\"1\n\rCreateRoleReq\022\016\n\006ro"
      "leId\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\014\"\037\n\rCreateRo"
      "leRsp\022\016\n\006result\030\001 \001(\005\"=\n\017LoadUserDataRsp"
      "\022*\n\004info\030\001 \001(\0132\034.battlespheresproto.User"
      "Info\",\n\014PlayerStatus\022\n\n\002id\030\001 \001(\005\022\020\n\010isOn"
      "line\030\002 \001(\010\"i\n\016RoomPlayerInfo\022\017\n\007user_id\030"
      "\001 \001(\005\022\020\n\010nickname\030\003 \001(\014\0224\n\014weapon_infos\030"
      "\004 \003(\0132\036.battlespheresproto.WeaponInfo\"\"\n"
      "\020DismissRoomEvent\022\016\n\006reason\030\001 \001(\005\"\205\001\n\013Jo"
      "inRoomReq\022\017\n\007room_id\030\001 \001(\005\022\020\n\010level_id\030\002"
      " \001(\005\022\014\n\004mode\030\003 \001(\005\022\017\n\007private\030\004 \001(\010\0224\n\014w"
      "eapon_infos\030\005 \003(\0132\036.battlespheresproto.W"
      "eaponInfo\"\215\001\n\013JoinRoomRsp\022\016\n\006result\030\001 \001("
      "\005\022\017\n\007room_id\030\002 \001(\005\022\020\n\010level_id\030\003 \001(\005\022\020\n\010"
      "owner_id\030\004 \001(\005\0229\n\rother_players\030\005 \003(\0132\"."
      "battlespheresproto.RoomPlayerInfo\"A\n\rJoi"
      "nRoomEvent\0220\n\004info\030\001 \001(\0132\".battlespheres"
      "proto.RoomPlayerInfo\"\036\n\013QuitRoomReq\022\017\n\007r"
      "oom_id\030\001 \001(\005\"\035\n\013QuitRoomRsp\022\016\n\006result\030\001 "
      "\001(\005\" \n\rQuitRoomEvent\022\017\n\007user_id\030\001 \001(\005\"\035\n"
      "\nBuyBuffReq\022\017\n\007buff_id\030\001 \001(\005\"\034\n\nBuyBuffR"
      "sp\022\016\n\006result\030\001 \001(\005\"\032\n\014WeaponBuyReq\022\n\n\002id"
      "\030\001 \001(\005\"J\n\014WeaponBuyRsp\022\016\n\006result\030\001 \001(\005\022*"
      "\n\004info\030\002 \001(\0132\034.battlespheresproto.UserIn"
      "fo\",\n\017WeaponEquipInfo\022\n\n\002id\030\001 \001(\005\022\r\n\005ind"
      "ex\030\002 \001(\005\"D\n\016WeaponEquipReq\0222\n\005infos\030\001 \003("
      "\0132#.battlespheresproto.WeaponEquipInfo\"L"
      "\n\016WeaponEquipRsp\022\016\n\006result\030\001 \001(\005\022*\n\004info"
      "\030\002 \001(\0132\034.battlespheresproto.UserInfo\"3\n\017"
      "SkillUpgradeReq\022\017\n\007skillId\030\001 \001(\005\022\017\n\007next"
      "_lv\030\002 \001(\005\"M\n\017SkillUpgradeRsp\022\016\n\006result\030\001"
      " \001(\005\022*\n\004info\030\002 \001(\0132\034.battlespheresproto."
      "UserInfo\"\032\n\tFindFBReq\022\r\n\005fb_id\030\001 \001(\r\"M\n\t"
      "FindFBRsp\022\016\n\006result\030\001 \001(\005\0220\n\004info\030\002 \001(\0132"
      "\".battlespheresproto.RoomPlayerInfo\"\033\n\rI"
      "nvitationReq\022\n\n\002id\030\001 \001(\r\"A\n\rInvitationRs"
      "p\0220\n\004info\030\001 \001(\0132\".battlespheresproto.Roo"
      "mPlayerInfo\"1\n\023InvitationAnswerReq\022\016\n\006re"
      "sult\030\001 \001(\005\022\n\n\002id\030\002 \001(\r\"%\n\023InvitationAnsw"
      "erRsp\022\016\n\006result\030\001 \001(\005\"4\n\017BattleResultReq"
      "\022\021\n\tkillCount\030\001 \001(\005\022\016\n\006points\030\002 \001(\005\"M\n\017B"
      "attleResultRsp\022\016\n\006result\030\001 \001(\005\022*\n\004info\030\002"
      " \001(\0132\034.battlespheresproto.UserInfo*\252\005\n\005m"
      "sgId\022\n\n\006unused\020\000\022\017\n\013cmdLoginReq\020d\022\017\n\013cmd"
      "LoginRsp\020e\022\024\n\020cmdCreateRoleReq\020f\022\024\n\020cmdC"
      "reateRoleRsp\020g\022\026\n\022cmdLoadUserDataReq\020h\022\026"
      "\n\022cmdLoadUserDataRsp\020i\022\022\n\016cmdJoinRoomReq"
      "\020p\022\022\n\016cmdJoinRoomRsp\020q\022\022\n\016cmdQuitRoomReq"
      "\020r\022\022\n\016cmdQuitRoomRsp\020s\022\024\n\020cmdJoinRoomEve"
      "nt\020t\022\024\n\020cmdQuitRoomEvent\020u\022\027\n\023cmdDismiss"
      "RoomEvent\020v\022\021\n\rcmdBuyBuffReq\020w\022\021\n\rcmdBuy"
      "BuffRsp\020x\022\023\n\017cmdWeaponBuyReq\020y\022\023\n\017cmdWea"
      "ponBuyRsp\020z\022\025\n\021cmdWeaponEquipReq\020{\022\025\n\021cm"
      "dWeaponEquipRsp\020|\022\026\n\022cmdSkillUpgradeReq\020"
      "}\022\026\n\022cmdSkillUpgradeRsp\020~\022\021\n\014cmdFindFBRe"
      "q\020\254\002\022\021\n\014cmdFindFBRsp\020\255\002\022\025\n\020cmdInvitation"
      "Req\020\256\002\022\025\n\020cmdInvitationRsp\020\313\001\022\033\n\026cmdInvi"
      "tationAnswerReq\020\260\002\022\033\n\026cmdInvitationAnswe"
      "rRsp\020\261\002\022\027\n\022cmdBattleResultReq\020\316\001\022\027\n\022cmdB"
      "attleResultRsp\020\317\001\022\024\n\017cmdPlayerStatus\020\212\007*"
      "\322\005\n\nerror_code\022\013\n\007success\020\000\022\022\n\016server_is"
      "_busy\020\001\022\031\n\025need_to_create_a_role\020\002\022\032\n\026ac"
      "count_already_exists\020d\022\035\n\031account_or_pas"
      "sword_error\020e\022\026\n\022token_verify_error\020f\022\030\n"
      "\024token_verify_expired\020g\022\030\n\023role_id_non_e"
      "xisted\020\310\001\022\027\n\022nick_name_too_long\020\311\001\022\037\n\032ni"
      "ck_name_existing_keyword\020\312\001\022\032\n\025nick_name"
      "_non_existed\020\313\001\022\030\n\023player_info_invalid\020\254"
      "\002\022\031\n\024weapon_id_non_exists\020\255\002\022\025\n\020money_no"
      "n_enough\020\256\002\022\030\n\023weapon_already_have\020\257\002\022\024\n"
      "\017weapon_non_have\020\260\002\022\027\n\022skill_already_hav"
      "e\020\261\002\022\036\n\031skill_idLevel_non_existed\020\262\002\022\024\n\017"
      "fb_id_non_exist\020\263\002\022\024\n\017user_non_online\020\264\002"
      "\022\026\n\021invitation_refuse\020\265\002\022\027\n\022player_non_m"
      "ission\020\267\002\022\026\n\021player_in_mission\020\270\002\022\033\n\026mis"
      "sionConfig_non_have\020\303\002\022\034\n\027mission_progre"
      "ss_expire\020\304\002\022\023\n\016mission_expire\020\305\002\022\034\n\027pla"
      "yer_non_have_mission\020\306\002\022\023\n\016join_room_fai"
      "l\020\307\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4332);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "battlespheres.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_battlespheres_2eproto

const ::google::protobuf::EnumDescriptor* msgId_descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_enum_descriptors[0];
}
bool msgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 203:
    case 206:
    case 207:
    case 300:
    case 301:
    case 302:
    case 304:
    case 305:
    case 906:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* error_code_descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_enum_descriptors[1];
}
bool error_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 101:
    case 102:
    case 103:
    case 200:
    case 201:
    case 202:
    case 203:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 311:
    case 312:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkillInfo::kIdFieldNumber;
const int SkillInfo::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkillInfo::SkillInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.SkillInfo)
}
SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.SkillInfo)
}

void SkillInfo::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_) + sizeof(level_));
  _cached_size_ = 0;
}

SkillInfo::~SkillInfo() {
  // @@protoc_insertion_point(destructor:battlespheresproto.SkillInfo)
  SharedDtor();
}

void SkillInfo::SharedDtor() {
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SkillInfo& SkillInfo::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

SkillInfo* SkillInfo::New(::google::protobuf::Arena* arena) const {
  SkillInfo* n = new SkillInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.SkillInfo)
  ::memset(&id_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_) + sizeof(level_));
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.SkillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.SkillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.SkillInfo)
  return false;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.SkillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.SkillInfo)
}

::google::protobuf::uint8* SkillInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.SkillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.SkillInfo)
  return target;
}

size_t SkillInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.SkillInfo)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.SkillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SkillInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.SkillInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.SkillInfo)
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.SkillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.SkillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.SkillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {
  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkillInfo::InternalSwap(SkillInfo* other) {
  std::swap(id_, other->id_);
  std::swap(level_, other->level_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkillInfo

// int32 id = 1;
void SkillInfo::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 SkillInfo::id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.SkillInfo.id)
  return id_;
}
void SkillInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.SkillInfo.id)
}

// int32 level = 2;
void SkillInfo::clear_level() {
  level_ = 0;
}
::google::protobuf::int32 SkillInfo::level() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.SkillInfo.level)
  return level_;
}
void SkillInfo::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.SkillInfo.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponProperty::kIdFieldNumber;
const int WeaponProperty::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponProperty::WeaponProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.WeaponProperty)
}
WeaponProperty::WeaponProperty(const WeaponProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.WeaponProperty)
}

void WeaponProperty::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_) + sizeof(value_));
  _cached_size_ = 0;
}

WeaponProperty::~WeaponProperty() {
  // @@protoc_insertion_point(destructor:battlespheresproto.WeaponProperty)
  SharedDtor();
}

void WeaponProperty::SharedDtor() {
}

void WeaponProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponProperty::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeaponProperty& WeaponProperty::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponProperty* WeaponProperty::New(::google::protobuf::Arena* arena) const {
  WeaponProperty* n = new WeaponProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.WeaponProperty)
  ::memset(&id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_) + sizeof(value_));
}

bool WeaponProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.WeaponProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.WeaponProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.WeaponProperty)
  return false;
#undef DO_
}

void WeaponProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.WeaponProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.WeaponProperty)
}

::google::protobuf::uint8* WeaponProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.WeaponProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.WeaponProperty)
  return target;
}

size_t WeaponProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.WeaponProperty)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.WeaponProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.WeaponProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.WeaponProperty)
    MergeFrom(*source);
  }
}

void WeaponProperty::MergeFrom(const WeaponProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.WeaponProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void WeaponProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.WeaponProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponProperty::CopyFrom(const WeaponProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.WeaponProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponProperty::IsInitialized() const {
  return true;
}

void WeaponProperty::Swap(WeaponProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponProperty::InternalSwap(WeaponProperty* other) {
  std::swap(id_, other->id_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponProperty::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponProperty

// int32 id = 1;
void WeaponProperty::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 WeaponProperty::id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponProperty.id)
  return id_;
}
void WeaponProperty::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.WeaponProperty.id)
}

// float value = 2;
void WeaponProperty::clear_value() {
  value_ = 0;
}
float WeaponProperty::value() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponProperty.value)
  return value_;
}
void WeaponProperty::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.WeaponProperty.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponInfo::kIdFieldNumber;
const int WeaponInfo::kIndexFieldNumber;
const int WeaponInfo::kWeaponPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponInfo::WeaponInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.WeaponInfo)
}
WeaponInfo::WeaponInfo(const WeaponInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      weapon_properties_(from.weapon_properties_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.WeaponInfo)
}

void WeaponInfo::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_) + sizeof(index_));
  _cached_size_ = 0;
}

WeaponInfo::~WeaponInfo() {
  // @@protoc_insertion_point(destructor:battlespheresproto.WeaponInfo)
  SharedDtor();
}

void WeaponInfo::SharedDtor() {
}

void WeaponInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponInfo::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeaponInfo& WeaponInfo::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponInfo* WeaponInfo::New(::google::protobuf::Arena* arena) const {
  WeaponInfo* n = new WeaponInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.WeaponInfo)
  weapon_properties_.Clear();
  ::memset(&id_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_) + sizeof(index_));
}

bool WeaponInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.WeaponInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .battlespheresproto.WeaponProperty weapon_properties = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.WeaponInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.WeaponInfo)
  return false;
#undef DO_
}

void WeaponInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.WeaponInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // repeated .battlespheresproto.WeaponProperty weapon_properties = 3;
  for (unsigned int i = 0, n = this->weapon_properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weapon_properties(i), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.WeaponInfo)
}

::google::protobuf::uint8* WeaponInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.WeaponInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // repeated .battlespheresproto.WeaponProperty weapon_properties = 3;
  for (unsigned int i = 0, n = this->weapon_properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->weapon_properties(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.WeaponInfo)
  return target;
}

size_t WeaponInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.WeaponInfo)
  size_t total_size = 0;

  // repeated .battlespheresproto.WeaponProperty weapon_properties = 3;
  {
    unsigned int count = this->weapon_properties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_properties(i));
    }
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.WeaponInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.WeaponInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.WeaponInfo)
    MergeFrom(*source);
  }
}

void WeaponInfo::MergeFrom(const WeaponInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.WeaponInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weapon_properties_.MergeFrom(from.weapon_properties_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void WeaponInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.WeaponInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponInfo::CopyFrom(const WeaponInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.WeaponInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponInfo::IsInitialized() const {
  return true;
}

void WeaponInfo::Swap(WeaponInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponInfo::InternalSwap(WeaponInfo* other) {
  weapon_properties_.InternalSwap(&other->weapon_properties_);
  std::swap(id_, other->id_);
  std::swap(index_, other->index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponInfo::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponInfo

// int32 id = 1;
void WeaponInfo::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 WeaponInfo::id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponInfo.id)
  return id_;
}
void WeaponInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.WeaponInfo.id)
}

// int32 index = 2;
void WeaponInfo::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 WeaponInfo::index() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponInfo.index)
  return index_;
}
void WeaponInfo::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.WeaponInfo.index)
}

// repeated .battlespheresproto.WeaponProperty weapon_properties = 3;
int WeaponInfo::weapon_properties_size() const {
  return weapon_properties_.size();
}
void WeaponInfo::clear_weapon_properties() {
  weapon_properties_.Clear();
}
const ::battlespheresproto::WeaponProperty& WeaponInfo::weapon_properties(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponInfo.weapon_properties)
  return weapon_properties_.Get(index);
}
::battlespheresproto::WeaponProperty* WeaponInfo::mutable_weapon_properties(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.WeaponInfo.weapon_properties)
  return weapon_properties_.Mutable(index);
}
::battlespheresproto::WeaponProperty* WeaponInfo::add_weapon_properties() {
  // @@protoc_insertion_point(field_add:battlespheresproto.WeaponInfo.weapon_properties)
  return weapon_properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponProperty >*
WeaponInfo::mutable_weapon_properties() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.WeaponInfo.weapon_properties)
  return &weapon_properties_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponProperty >&
WeaponInfo::weapon_properties() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.WeaponInfo.weapon_properties)
  return weapon_properties_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MissionInfo::kIdFieldNumber;
const int MissionInfo::kReceivedTimeFieldNumber;
const int MissionInfo::kPostionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MissionInfo::MissionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.MissionInfo)
}
MissionInfo::MissionInfo(const MissionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&postion_) -
    reinterpret_cast<char*>(&id_) + sizeof(postion_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.MissionInfo)
}

void MissionInfo::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&postion_) -
    reinterpret_cast<char*>(&id_) + sizeof(postion_));
  _cached_size_ = 0;
}

MissionInfo::~MissionInfo() {
  // @@protoc_insertion_point(destructor:battlespheresproto.MissionInfo)
  SharedDtor();
}

void MissionInfo::SharedDtor() {
}

void MissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionInfo::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MissionInfo& MissionInfo::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

MissionInfo* MissionInfo::New(::google::protobuf::Arena* arena) const {
  MissionInfo* n = new MissionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MissionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.MissionInfo)
  ::memset(&id_, 0, reinterpret_cast<char*>(&postion_) -
    reinterpret_cast<char*>(&id_) + sizeof(postion_));
}

bool MissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.MissionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 receivedTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivedtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 postion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &postion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.MissionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.MissionInfo)
  return false;
#undef DO_
}

void MissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.MissionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 receivedTime = 2;
  if (this->receivedtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->receivedtime(), output);
  }

  // int32 postion = 3;
  if (this->postion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->postion(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.MissionInfo)
}

::google::protobuf::uint8* MissionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.MissionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 receivedTime = 2;
  if (this->receivedtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->receivedtime(), target);
  }

  // int32 postion = 3;
  if (this->postion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->postion(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.MissionInfo)
  return target;
}

size_t MissionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.MissionInfo)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 receivedTime = 2;
  if (this->receivedtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receivedtime());
  }

  // int32 postion = 3;
  if (this->postion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->postion());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MissionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.MissionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.MissionInfo)
    MergeFrom(*source);
  }
}

void MissionInfo::MergeFrom(const MissionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.receivedtime() != 0) {
    set_receivedtime(from.receivedtime());
  }
  if (from.postion() != 0) {
    set_postion(from.postion());
  }
}

void MissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionInfo::CopyFrom(const MissionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfo::IsInitialized() const {
  return true;
}

void MissionInfo::Swap(MissionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MissionInfo::InternalSwap(MissionInfo* other) {
  std::swap(id_, other->id_);
  std::swap(receivedtime_, other->receivedtime_);
  std::swap(postion_, other->postion_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MissionInfo::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MissionInfo

// int32 id = 1;
void MissionInfo::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 MissionInfo::id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.MissionInfo.id)
  return id_;
}
void MissionInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.MissionInfo.id)
}

// int32 receivedTime = 2;
void MissionInfo::clear_receivedtime() {
  receivedtime_ = 0;
}
::google::protobuf::int32 MissionInfo::receivedtime() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.MissionInfo.receivedTime)
  return receivedtime_;
}
void MissionInfo::set_receivedtime(::google::protobuf::int32 value) {
  
  receivedtime_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.MissionInfo.receivedTime)
}

// int32 postion = 3;
void MissionInfo::clear_postion() {
  postion_ = 0;
}
::google::protobuf::int32 MissionInfo::postion() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.MissionInfo.postion)
  return postion_;
}
void MissionInfo::set_postion(::google::protobuf::int32 value) {
  
  postion_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.MissionInfo.postion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MissionProgressInfo::kMissionTypeFieldNumber;
const int MissionProgressInfo::kProgressFieldNumber;
const int MissionProgressInfo::kExpireTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MissionProgressInfo::MissionProgressInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.MissionProgressInfo)
}
MissionProgressInfo::MissionProgressInfo(const MissionProgressInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&missiontype_, &from.missiontype_,
    reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&missiontype_) + sizeof(expiretime_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.MissionProgressInfo)
}

void MissionProgressInfo::SharedCtor() {
  ::memset(&missiontype_, 0, reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&missiontype_) + sizeof(expiretime_));
  _cached_size_ = 0;
}

MissionProgressInfo::~MissionProgressInfo() {
  // @@protoc_insertion_point(destructor:battlespheresproto.MissionProgressInfo)
  SharedDtor();
}

void MissionProgressInfo::SharedDtor() {
}

void MissionProgressInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionProgressInfo::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MissionProgressInfo& MissionProgressInfo::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

MissionProgressInfo* MissionProgressInfo::New(::google::protobuf::Arena* arena) const {
  MissionProgressInfo* n = new MissionProgressInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MissionProgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.MissionProgressInfo)
  ::memset(&missiontype_, 0, reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&missiontype_) + sizeof(expiretime_));
}

bool MissionProgressInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.MissionProgressInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 missionType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expireTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expiretime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.MissionProgressInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.MissionProgressInfo)
  return false;
#undef DO_
}

void MissionProgressInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.MissionProgressInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 missionType = 1;
  if (this->missiontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missiontype(), output);
  }

  // int32 progress = 2;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->progress(), output);
  }

  // int32 expireTime = 3;
  if (this->expiretime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expiretime(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.MissionProgressInfo)
}

::google::protobuf::uint8* MissionProgressInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.MissionProgressInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 missionType = 1;
  if (this->missiontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missiontype(), target);
  }

  // int32 progress = 2;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->progress(), target);
  }

  // int32 expireTime = 3;
  if (this->expiretime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expiretime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.MissionProgressInfo)
  return target;
}

size_t MissionProgressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.MissionProgressInfo)
  size_t total_size = 0;

  // int32 missionType = 1;
  if (this->missiontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->missiontype());
  }

  // int32 progress = 2;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress());
  }

  // int32 expireTime = 3;
  if (this->expiretime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expiretime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionProgressInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.MissionProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionProgressInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MissionProgressInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.MissionProgressInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.MissionProgressInfo)
    MergeFrom(*source);
  }
}

void MissionProgressInfo::MergeFrom(const MissionProgressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.MissionProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.missiontype() != 0) {
    set_missiontype(from.missiontype());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.expiretime() != 0) {
    set_expiretime(from.expiretime());
  }
}

void MissionProgressInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.MissionProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionProgressInfo::CopyFrom(const MissionProgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.MissionProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionProgressInfo::IsInitialized() const {
  return true;
}

void MissionProgressInfo::Swap(MissionProgressInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MissionProgressInfo::InternalSwap(MissionProgressInfo* other) {
  std::swap(missiontype_, other->missiontype_);
  std::swap(progress_, other->progress_);
  std::swap(expiretime_, other->expiretime_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MissionProgressInfo::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MissionProgressInfo

// int32 missionType = 1;
void MissionProgressInfo::clear_missiontype() {
  missiontype_ = 0;
}
::google::protobuf::int32 MissionProgressInfo::missiontype() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.MissionProgressInfo.missionType)
  return missiontype_;
}
void MissionProgressInfo::set_missiontype(::google::protobuf::int32 value) {
  
  missiontype_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.MissionProgressInfo.missionType)
}

// int32 progress = 2;
void MissionProgressInfo::clear_progress() {
  progress_ = 0;
}
::google::protobuf::int32 MissionProgressInfo::progress() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.MissionProgressInfo.progress)
  return progress_;
}
void MissionProgressInfo::set_progress(::google::protobuf::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.MissionProgressInfo.progress)
}

// int32 expireTime = 3;
void MissionProgressInfo::clear_expiretime() {
  expiretime_ = 0;
}
::google::protobuf::int32 MissionProgressInfo::expiretime() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.MissionProgressInfo.expireTime)
  return expiretime_;
}
void MissionProgressInfo::set_expiretime(::google::protobuf::int32 value) {
  
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.MissionProgressInfo.expireTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameUserInfo::kUserIdFieldNumber;
const int GameUserInfo::kNicknameFieldNumber;
const int GameUserInfo::kRoleIdFieldNumber;
const int GameUserInfo::kRankFieldNumber;
const int GameUserInfo::kCoinFieldNumber;
const int GameUserInfo::kExpFieldNumber;
const int GameUserInfo::kLevelFieldNumber;
const int GameUserInfo::kStrSkillInfosFieldNumber;
const int GameUserInfo::kStrWeaponInfosFieldNumber;
const int GameUserInfo::kStrprogressFieldNumber;
const int GameUserInfo::kStrMissionInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameUserInfo::GameUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.GameUserInfo)
}
GameUserInfo::GameUserInfo(const GameUserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  strskillinfos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strskillinfos().size() > 0) {
    strskillinfos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strskillinfos_);
  }
  strweaponinfos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strweaponinfos().size() > 0) {
    strweaponinfos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strweaponinfos_);
  }
  strprogress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strprogress().size() > 0) {
    strprogress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strprogress_);
  }
  strmissioninfos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strmissioninfos().size() > 0) {
    strmissioninfos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmissioninfos_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.GameUserInfo)
}

void GameUserInfo::SharedCtor() {
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strskillinfos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strweaponinfos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strprogress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmissioninfos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(level_));
  _cached_size_ = 0;
}

GameUserInfo::~GameUserInfo() {
  // @@protoc_insertion_point(destructor:battlespheresproto.GameUserInfo)
  SharedDtor();
}

void GameUserInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strskillinfos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strweaponinfos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strprogress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmissioninfos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameUserInfo::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameUserInfo& GameUserInfo::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameUserInfo* GameUserInfo::New(::google::protobuf::Arena* arena) const {
  GameUserInfo* n = new GameUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.GameUserInfo)
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strskillinfos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strweaponinfos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strprogress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmissioninfos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(level_));
}

bool GameUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.GameUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 role_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rank = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 coin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strSkillInfos = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strskillinfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strWeaponInfos = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strweaponinfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strprogress = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strprogress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strMissionInfos = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmissioninfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.GameUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.GameUserInfo)
  return false;
#undef DO_
}

void GameUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.GameUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // int32 role_id = 3;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_id(), output);
  }

  // int32 rank = 4;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // int32 coin = 5;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->coin(), output);
  }

  // int32 exp = 6;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }

  // int32 level = 7;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // bytes strSkillInfos = 21;
  if (this->strskillinfos().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->strskillinfos(), output);
  }

  // bytes strWeaponInfos = 22;
  if (this->strweaponinfos().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->strweaponinfos(), output);
  }

  // bytes strprogress = 23;
  if (this->strprogress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->strprogress(), output);
  }

  // bytes strMissionInfos = 24;
  if (this->strmissioninfos().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->strmissioninfos(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.GameUserInfo)
}

::google::protobuf::uint8* GameUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.GameUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nickname(), target);
  }

  // int32 role_id = 3;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_id(), target);
  }

  // int32 rank = 4;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // int32 coin = 5;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->coin(), target);
  }

  // int32 exp = 6;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }

  // int32 level = 7;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // bytes strSkillInfos = 21;
  if (this->strskillinfos().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->strskillinfos(), target);
  }

  // bytes strWeaponInfos = 22;
  if (this->strweaponinfos().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->strweaponinfos(), target);
  }

  // bytes strprogress = 23;
  if (this->strprogress().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->strprogress(), target);
  }

  // bytes strMissionInfos = 24;
  if (this->strmissioninfos().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->strmissioninfos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.GameUserInfo)
  return target;
}

size_t GameUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.GameUserInfo)
  size_t total_size = 0;

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nickname());
  }

  // bytes strSkillInfos = 21;
  if (this->strskillinfos().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strskillinfos());
  }

  // bytes strWeaponInfos = 22;
  if (this->strweaponinfos().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strweaponinfos());
  }

  // bytes strprogress = 23;
  if (this->strprogress().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strprogress());
  }

  // bytes strMissionInfos = 24;
  if (this->strmissioninfos().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strmissioninfos());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  // int32 role_id = 3;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_id());
  }

  // int32 rank = 4;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  // int32 coin = 5;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coin());
  }

  // int32 exp = 6;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  // int32 level = 7;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.GameUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameUserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.GameUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.GameUserInfo)
    MergeFrom(*source);
  }
}

void GameUserInfo::MergeFrom(const GameUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.GameUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.strskillinfos().size() > 0) {

    strskillinfos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strskillinfos_);
  }
  if (from.strweaponinfos().size() > 0) {

    strweaponinfos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strweaponinfos_);
  }
  if (from.strprogress().size() > 0) {

    strprogress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strprogress_);
  }
  if (from.strmissioninfos().size() > 0) {

    strmissioninfos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmissioninfos_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void GameUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.GameUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameUserInfo::CopyFrom(const GameUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.GameUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserInfo::IsInitialized() const {
  return true;
}

void GameUserInfo::Swap(GameUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameUserInfo::InternalSwap(GameUserInfo* other) {
  nickname_.Swap(&other->nickname_);
  strskillinfos_.Swap(&other->strskillinfos_);
  strweaponinfos_.Swap(&other->strweaponinfos_);
  strprogress_.Swap(&other->strprogress_);
  strmissioninfos_.Swap(&other->strmissioninfos_);
  std::swap(user_id_, other->user_id_);
  std::swap(role_id_, other->role_id_);
  std::swap(rank_, other->rank_);
  std::swap(coin_, other->coin_);
  std::swap(exp_, other->exp_);
  std::swap(level_, other->level_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameUserInfo::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameUserInfo

// int32 user_id = 1;
void GameUserInfo::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 GameUserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.user_id)
  return user_id_;
}
void GameUserInfo::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.user_id)
}

// bytes nickname = 2;
void GameUserInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.nickname)
  return nickname_.GetNoArena();
}
void GameUserInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.nickname)
}
#if LANG_CXX11
void GameUserInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battlespheresproto.GameUserInfo.nickname)
}
#endif
void GameUserInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battlespheresproto.GameUserInfo.nickname)
}
void GameUserInfo::set_nickname(const void* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battlespheresproto.GameUserInfo.nickname)
}
::std::string* GameUserInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:battlespheresproto.GameUserInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:battlespheresproto.GameUserInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameUserInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.GameUserInfo.nickname)
}

// int32 role_id = 3;
void GameUserInfo::clear_role_id() {
  role_id_ = 0;
}
::google::protobuf::int32 GameUserInfo::role_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.role_id)
  return role_id_;
}
void GameUserInfo::set_role_id(::google::protobuf::int32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.role_id)
}

// int32 rank = 4;
void GameUserInfo::clear_rank() {
  rank_ = 0;
}
::google::protobuf::int32 GameUserInfo::rank() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.rank)
  return rank_;
}
void GameUserInfo::set_rank(::google::protobuf::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.rank)
}

// int32 coin = 5;
void GameUserInfo::clear_coin() {
  coin_ = 0;
}
::google::protobuf::int32 GameUserInfo::coin() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.coin)
  return coin_;
}
void GameUserInfo::set_coin(::google::protobuf::int32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.coin)
}

// int32 exp = 6;
void GameUserInfo::clear_exp() {
  exp_ = 0;
}
::google::protobuf::int32 GameUserInfo::exp() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.exp)
  return exp_;
}
void GameUserInfo::set_exp(::google::protobuf::int32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.exp)
}

// int32 level = 7;
void GameUserInfo::clear_level() {
  level_ = 0;
}
::google::protobuf::int32 GameUserInfo::level() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.level)
  return level_;
}
void GameUserInfo::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.level)
}

// bytes strSkillInfos = 21;
void GameUserInfo::clear_strskillinfos() {
  strskillinfos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameUserInfo::strskillinfos() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.strSkillInfos)
  return strskillinfos_.GetNoArena();
}
void GameUserInfo::set_strskillinfos(const ::std::string& value) {
  
  strskillinfos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.strSkillInfos)
}
#if LANG_CXX11
void GameUserInfo::set_strskillinfos(::std::string&& value) {
  
  strskillinfos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battlespheresproto.GameUserInfo.strSkillInfos)
}
#endif
void GameUserInfo::set_strskillinfos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strskillinfos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battlespheresproto.GameUserInfo.strSkillInfos)
}
void GameUserInfo::set_strskillinfos(const void* value, size_t size) {
  
  strskillinfos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battlespheresproto.GameUserInfo.strSkillInfos)
}
::std::string* GameUserInfo::mutable_strskillinfos() {
  
  // @@protoc_insertion_point(field_mutable:battlespheresproto.GameUserInfo.strSkillInfos)
  return strskillinfos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameUserInfo::release_strskillinfos() {
  // @@protoc_insertion_point(field_release:battlespheresproto.GameUserInfo.strSkillInfos)
  
  return strskillinfos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameUserInfo::set_allocated_strskillinfos(::std::string* strskillinfos) {
  if (strskillinfos != NULL) {
    
  } else {
    
  }
  strskillinfos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strskillinfos);
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.GameUserInfo.strSkillInfos)
}

// bytes strWeaponInfos = 22;
void GameUserInfo::clear_strweaponinfos() {
  strweaponinfos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameUserInfo::strweaponinfos() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.strWeaponInfos)
  return strweaponinfos_.GetNoArena();
}
void GameUserInfo::set_strweaponinfos(const ::std::string& value) {
  
  strweaponinfos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.strWeaponInfos)
}
#if LANG_CXX11
void GameUserInfo::set_strweaponinfos(::std::string&& value) {
  
  strweaponinfos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battlespheresproto.GameUserInfo.strWeaponInfos)
}
#endif
void GameUserInfo::set_strweaponinfos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strweaponinfos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battlespheresproto.GameUserInfo.strWeaponInfos)
}
void GameUserInfo::set_strweaponinfos(const void* value, size_t size) {
  
  strweaponinfos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battlespheresproto.GameUserInfo.strWeaponInfos)
}
::std::string* GameUserInfo::mutable_strweaponinfos() {
  
  // @@protoc_insertion_point(field_mutable:battlespheresproto.GameUserInfo.strWeaponInfos)
  return strweaponinfos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameUserInfo::release_strweaponinfos() {
  // @@protoc_insertion_point(field_release:battlespheresproto.GameUserInfo.strWeaponInfos)
  
  return strweaponinfos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameUserInfo::set_allocated_strweaponinfos(::std::string* strweaponinfos) {
  if (strweaponinfos != NULL) {
    
  } else {
    
  }
  strweaponinfos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strweaponinfos);
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.GameUserInfo.strWeaponInfos)
}

// bytes strprogress = 23;
void GameUserInfo::clear_strprogress() {
  strprogress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameUserInfo::strprogress() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.strprogress)
  return strprogress_.GetNoArena();
}
void GameUserInfo::set_strprogress(const ::std::string& value) {
  
  strprogress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.strprogress)
}
#if LANG_CXX11
void GameUserInfo::set_strprogress(::std::string&& value) {
  
  strprogress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battlespheresproto.GameUserInfo.strprogress)
}
#endif
void GameUserInfo::set_strprogress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strprogress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battlespheresproto.GameUserInfo.strprogress)
}
void GameUserInfo::set_strprogress(const void* value, size_t size) {
  
  strprogress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battlespheresproto.GameUserInfo.strprogress)
}
::std::string* GameUserInfo::mutable_strprogress() {
  
  // @@protoc_insertion_point(field_mutable:battlespheresproto.GameUserInfo.strprogress)
  return strprogress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameUserInfo::release_strprogress() {
  // @@protoc_insertion_point(field_release:battlespheresproto.GameUserInfo.strprogress)
  
  return strprogress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameUserInfo::set_allocated_strprogress(::std::string* strprogress) {
  if (strprogress != NULL) {
    
  } else {
    
  }
  strprogress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strprogress);
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.GameUserInfo.strprogress)
}

// bytes strMissionInfos = 24;
void GameUserInfo::clear_strmissioninfos() {
  strmissioninfos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameUserInfo::strmissioninfos() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.GameUserInfo.strMissionInfos)
  return strmissioninfos_.GetNoArena();
}
void GameUserInfo::set_strmissioninfos(const ::std::string& value) {
  
  strmissioninfos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:battlespheresproto.GameUserInfo.strMissionInfos)
}
#if LANG_CXX11
void GameUserInfo::set_strmissioninfos(::std::string&& value) {
  
  strmissioninfos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battlespheresproto.GameUserInfo.strMissionInfos)
}
#endif
void GameUserInfo::set_strmissioninfos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strmissioninfos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battlespheresproto.GameUserInfo.strMissionInfos)
}
void GameUserInfo::set_strmissioninfos(const void* value, size_t size) {
  
  strmissioninfos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battlespheresproto.GameUserInfo.strMissionInfos)
}
::std::string* GameUserInfo::mutable_strmissioninfos() {
  
  // @@protoc_insertion_point(field_mutable:battlespheresproto.GameUserInfo.strMissionInfos)
  return strmissioninfos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameUserInfo::release_strmissioninfos() {
  // @@protoc_insertion_point(field_release:battlespheresproto.GameUserInfo.strMissionInfos)
  
  return strmissioninfos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameUserInfo::set_allocated_strmissioninfos(::std::string* strmissioninfos) {
  if (strmissioninfos != NULL) {
    
  } else {
    
  }
  strmissioninfos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmissioninfos);
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.GameUserInfo.strMissionInfos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponInfos::kWeaponInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponInfos::WeaponInfos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.WeaponInfos)
}
WeaponInfos::WeaponInfos(const WeaponInfos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      weapon_infos_(from.weapon_infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.WeaponInfos)
}

void WeaponInfos::SharedCtor() {
  _cached_size_ = 0;
}

WeaponInfos::~WeaponInfos() {
  // @@protoc_insertion_point(destructor:battlespheresproto.WeaponInfos)
  SharedDtor();
}

void WeaponInfos::SharedDtor() {
}

void WeaponInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponInfos::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeaponInfos& WeaponInfos::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponInfos* WeaponInfos::New(::google::protobuf::Arena* arena) const {
  WeaponInfos* n = new WeaponInfos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.WeaponInfos)
  weapon_infos_.Clear();
}

bool WeaponInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.WeaponInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .battlespheresproto.WeaponInfo weapon_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.WeaponInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.WeaponInfos)
  return false;
#undef DO_
}

void WeaponInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.WeaponInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 1;
  for (unsigned int i = 0, n = this->weapon_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weapon_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.WeaponInfos)
}

::google::protobuf::uint8* WeaponInfos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.WeaponInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 1;
  for (unsigned int i = 0, n = this->weapon_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->weapon_infos(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.WeaponInfos)
  return target;
}

size_t WeaponInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.WeaponInfos)
  size_t total_size = 0;

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 1;
  {
    unsigned int count = this->weapon_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.WeaponInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponInfos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponInfos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.WeaponInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.WeaponInfos)
    MergeFrom(*source);
  }
}

void WeaponInfos::MergeFrom(const WeaponInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.WeaponInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weapon_infos_.MergeFrom(from.weapon_infos_);
}

void WeaponInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.WeaponInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponInfos::CopyFrom(const WeaponInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.WeaponInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponInfos::IsInitialized() const {
  return true;
}

void WeaponInfos::Swap(WeaponInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponInfos::InternalSwap(WeaponInfos* other) {
  weapon_infos_.InternalSwap(&other->weapon_infos_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponInfos::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponInfos

// repeated .battlespheresproto.WeaponInfo weapon_infos = 1;
int WeaponInfos::weapon_infos_size() const {
  return weapon_infos_.size();
}
void WeaponInfos::clear_weapon_infos() {
  weapon_infos_.Clear();
}
const ::battlespheresproto::WeaponInfo& WeaponInfos::weapon_infos(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponInfos.weapon_infos)
  return weapon_infos_.Get(index);
}
::battlespheresproto::WeaponInfo* WeaponInfos::mutable_weapon_infos(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.WeaponInfos.weapon_infos)
  return weapon_infos_.Mutable(index);
}
::battlespheresproto::WeaponInfo* WeaponInfos::add_weapon_infos() {
  // @@protoc_insertion_point(field_add:battlespheresproto.WeaponInfos.weapon_infos)
  return weapon_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponInfo >*
WeaponInfos::mutable_weapon_infos() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.WeaponInfos.weapon_infos)
  return &weapon_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponInfo >&
WeaponInfos::weapon_infos() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.WeaponInfos.weapon_infos)
  return weapon_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkillInfos::kSkillInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkillInfos::SkillInfos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.SkillInfos)
}
SkillInfos::SkillInfos(const SkillInfos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_infos_(from.skill_infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.SkillInfos)
}

void SkillInfos::SharedCtor() {
  _cached_size_ = 0;
}

SkillInfos::~SkillInfos() {
  // @@protoc_insertion_point(destructor:battlespheresproto.SkillInfos)
  SharedDtor();
}

void SkillInfos::SharedDtor() {
}

void SkillInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfos::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SkillInfos& SkillInfos::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

SkillInfos* SkillInfos::New(::google::protobuf::Arena* arena) const {
  SkillInfos* n = new SkillInfos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkillInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.SkillInfos)
  skill_infos_.Clear();
}

bool SkillInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.SkillInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .battlespheresproto.SkillInfo skill_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.SkillInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.SkillInfos)
  return false;
#undef DO_
}

void SkillInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.SkillInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battlespheresproto.SkillInfo skill_infos = 1;
  for (unsigned int i = 0, n = this->skill_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.SkillInfos)
}

::google::protobuf::uint8* SkillInfos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.SkillInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battlespheresproto.SkillInfo skill_infos = 1;
  for (unsigned int i = 0, n = this->skill_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->skill_infos(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.SkillInfos)
  return target;
}

size_t SkillInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.SkillInfos)
  size_t total_size = 0;

  // repeated .battlespheresproto.SkillInfo skill_infos = 1;
  {
    unsigned int count = this->skill_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.SkillInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillInfos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SkillInfos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.SkillInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.SkillInfos)
    MergeFrom(*source);
  }
}

void SkillInfos::MergeFrom(const SkillInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.SkillInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_infos_.MergeFrom(from.skill_infos_);
}

void SkillInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.SkillInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfos::CopyFrom(const SkillInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.SkillInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfos::IsInitialized() const {
  return true;
}

void SkillInfos::Swap(SkillInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkillInfos::InternalSwap(SkillInfos* other) {
  skill_infos_.InternalSwap(&other->skill_infos_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkillInfos::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkillInfos

// repeated .battlespheresproto.SkillInfo skill_infos = 1;
int SkillInfos::skill_infos_size() const {
  return skill_infos_.size();
}
void SkillInfos::clear_skill_infos() {
  skill_infos_.Clear();
}
const ::battlespheresproto::SkillInfo& SkillInfos::skill_infos(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.SkillInfos.skill_infos)
  return skill_infos_.Get(index);
}
::battlespheresproto::SkillInfo* SkillInfos::mutable_skill_infos(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.SkillInfos.skill_infos)
  return skill_infos_.Mutable(index);
}
::battlespheresproto::SkillInfo* SkillInfos::add_skill_infos() {
  // @@protoc_insertion_point(field_add:battlespheresproto.SkillInfos.skill_infos)
  return skill_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::SkillInfo >*
SkillInfos::mutable_skill_infos() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.SkillInfos.skill_infos)
  return &skill_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::SkillInfo >&
SkillInfos::skill_infos() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.SkillInfos.skill_infos)
  return skill_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MissionInfos::kMissionInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MissionInfos::MissionInfos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.MissionInfos)
}
MissionInfos::MissionInfos(const MissionInfos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_infos_(from.mission_infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.MissionInfos)
}

void MissionInfos::SharedCtor() {
  _cached_size_ = 0;
}

MissionInfos::~MissionInfos() {
  // @@protoc_insertion_point(destructor:battlespheresproto.MissionInfos)
  SharedDtor();
}

void MissionInfos::SharedDtor() {
}

void MissionInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionInfos::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MissionInfos& MissionInfos::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

MissionInfos* MissionInfos::New(::google::protobuf::Arena* arena) const {
  MissionInfos* n = new MissionInfos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MissionInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.MissionInfos)
  mission_infos_.Clear();
}

bool MissionInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.MissionInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .battlespheresproto.MissionInfo mission_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.MissionInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.MissionInfos)
  return false;
#undef DO_
}

void MissionInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.MissionInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battlespheresproto.MissionInfo mission_infos = 1;
  for (unsigned int i = 0, n = this->mission_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.MissionInfos)
}

::google::protobuf::uint8* MissionInfos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.MissionInfos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battlespheresproto.MissionInfo mission_infos = 1;
  for (unsigned int i = 0, n = this->mission_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mission_infos(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.MissionInfos)
  return target;
}

size_t MissionInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.MissionInfos)
  size_t total_size = 0;

  // repeated .battlespheresproto.MissionInfo mission_infos = 1;
  {
    unsigned int count = this->mission_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.MissionInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionInfos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MissionInfos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.MissionInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.MissionInfos)
    MergeFrom(*source);
  }
}

void MissionInfos::MergeFrom(const MissionInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.MissionInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_infos_.MergeFrom(from.mission_infos_);
}

void MissionInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.MissionInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionInfos::CopyFrom(const MissionInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.MissionInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfos::IsInitialized() const {
  return true;
}

void MissionInfos::Swap(MissionInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MissionInfos::InternalSwap(MissionInfos* other) {
  mission_infos_.InternalSwap(&other->mission_infos_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MissionInfos::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MissionInfos

// repeated .battlespheresproto.MissionInfo mission_infos = 1;
int MissionInfos::mission_infos_size() const {
  return mission_infos_.size();
}
void MissionInfos::clear_mission_infos() {
  mission_infos_.Clear();
}
const ::battlespheresproto::MissionInfo& MissionInfos::mission_infos(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.MissionInfos.mission_infos)
  return mission_infos_.Get(index);
}
::battlespheresproto::MissionInfo* MissionInfos::mutable_mission_infos(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.MissionInfos.mission_infos)
  return mission_infos_.Mutable(index);
}
::battlespheresproto::MissionInfo* MissionInfos::add_mission_infos() {
  // @@protoc_insertion_point(field_add:battlespheresproto.MissionInfos.mission_infos)
  return mission_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::MissionInfo >*
MissionInfos::mutable_mission_infos() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.MissionInfos.mission_infos)
  return &mission_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::MissionInfo >&
MissionInfos::mission_infos() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.MissionInfos.mission_infos)
  return mission_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kNicknameFieldNumber;
const int UserInfo::kRoleIdFieldNumber;
const int UserInfo::kRankFieldNumber;
const int UserInfo::kCoinFieldNumber;
const int UserInfo::kExpFieldNumber;
const int UserInfo::kSkillInfosFieldNumber;
const int UserInfo::kWeaponInfosFieldNumber;
const int UserInfo::kMissionProgressInfoFieldNumber;
const int UserInfo::kMissionInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_infos_(from.skill_infos_),
      weapon_infos_(from.weapon_infos_),
      mission_infos_(from.mission_infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.has_mission_progress_info()) {
    mission_progress_info_ = new ::battlespheresproto::MissionProgressInfo(*from.mission_progress_info_);
  } else {
    mission_progress_info_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(coin_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.UserInfo)
}

void UserInfo::SharedCtor() {
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mission_progress_info_, 0, reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&mission_progress_info_) + sizeof(coin_));
  _cached_size_ = 0;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:battlespheresproto.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete mission_progress_info_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInfo& UserInfo::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.UserInfo)
  skill_infos_.Clear();
  weapon_infos_.Clear();
  mission_infos_.Clear();
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && mission_progress_info_ != NULL) {
    delete mission_progress_info_;
  }
  mission_progress_info_ = NULL;
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(coin_));
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 role_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rank = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 coin = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exp = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .battlespheresproto.SkillInfo skill_infos = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .battlespheresproto.WeaponInfo weapon_infos = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .battlespheresproto.MissionProgressInfo mission_progress_info = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_progress_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .battlespheresproto.MissionInfo mission_infos = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // bytes nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nickname(), output);
  }

  // int32 role_id = 4;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_id(), output);
  }

  // int32 rank = 17;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->rank(), output);
  }

  // int32 coin = 18;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->coin(), output);
  }

  // int32 exp = 19;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->exp(), output);
  }

  // repeated .battlespheresproto.SkillInfo skill_infos = 21;
  for (unsigned int i = 0, n = this->skill_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->skill_infos(i), output);
  }

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 22;
  for (unsigned int i = 0, n = this->weapon_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->weapon_infos(i), output);
  }

  // .battlespheresproto.MissionProgressInfo mission_progress_info = 31;
  if (this->has_mission_progress_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->mission_progress_info_, output);
  }

  // repeated .battlespheresproto.MissionInfo mission_infos = 32;
  for (unsigned int i = 0, n = this->mission_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->mission_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // bytes nickname = 3;
  if (this->nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nickname(), target);
  }

  // int32 role_id = 4;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_id(), target);
  }

  // int32 rank = 17;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->rank(), target);
  }

  // int32 coin = 18;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->coin(), target);
  }

  // int32 exp = 19;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->exp(), target);
  }

  // repeated .battlespheresproto.SkillInfo skill_infos = 21;
  for (unsigned int i = 0, n = this->skill_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->skill_infos(i), deterministic, target);
  }

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 22;
  for (unsigned int i = 0, n = this->weapon_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->weapon_infos(i), deterministic, target);
  }

  // .battlespheresproto.MissionProgressInfo mission_progress_info = 31;
  if (this->has_mission_progress_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->mission_progress_info_, deterministic, target);
  }

  // repeated .battlespheresproto.MissionInfo mission_infos = 32;
  for (unsigned int i = 0, n = this->mission_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->mission_infos(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.UserInfo)
  size_t total_size = 0;

  // repeated .battlespheresproto.SkillInfo skill_infos = 21;
  {
    unsigned int count = this->skill_infos_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_infos(i));
    }
  }

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 22;
  {
    unsigned int count = this->weapon_infos_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_infos(i));
    }
  }

  // repeated .battlespheresproto.MissionInfo mission_infos = 32;
  {
    unsigned int count = this->mission_infos_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_infos(i));
    }
  }

  // bytes nickname = 3;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nickname());
  }

  // .battlespheresproto.MissionProgressInfo mission_progress_info = 31;
  if (this->has_mission_progress_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mission_progress_info_);
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  // int32 role_id = 4;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->role_id());
  }

  // int32 exp = 19;
  if (this->exp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  // int32 rank = 17;
  if (this->rank() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  // int32 coin = 18;
  if (this->coin() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_infos_.MergeFrom(from.skill_infos_);
  weapon_infos_.MergeFrom(from.weapon_infos_);
  mission_infos_.MergeFrom(from.mission_infos_);
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.has_mission_progress_info()) {
    mutable_mission_progress_info()->::battlespheresproto::MissionProgressInfo::MergeFrom(from.mission_progress_info());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  skill_infos_.InternalSwap(&other->skill_infos_);
  weapon_infos_.InternalSwap(&other->weapon_infos_);
  mission_infos_.InternalSwap(&other->mission_infos_);
  nickname_.Swap(&other->nickname_);
  std::swap(mission_progress_info_, other->mission_progress_info_);
  std::swap(user_id_, other->user_id_);
  std::swap(role_id_, other->role_id_);
  std::swap(exp_, other->exp_);
  std::swap(rank_, other->rank_);
  std::swap(coin_, other->coin_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// int32 user_id = 1;
void UserInfo::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.user_id)
  return user_id_;
}
void UserInfo::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.UserInfo.user_id)
}

// bytes nickname = 3;
void UserInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.nickname)
  return nickname_.GetNoArena();
}
void UserInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:battlespheresproto.UserInfo.nickname)
}
#if LANG_CXX11
void UserInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battlespheresproto.UserInfo.nickname)
}
#endif
void UserInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battlespheresproto.UserInfo.nickname)
}
void UserInfo::set_nickname(const void* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battlespheresproto.UserInfo.nickname)
}
::std::string* UserInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:battlespheresproto.UserInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:battlespheresproto.UserInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.UserInfo.nickname)
}

// int32 role_id = 4;
void UserInfo::clear_role_id() {
  role_id_ = 0;
}
::google::protobuf::int32 UserInfo::role_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.role_id)
  return role_id_;
}
void UserInfo::set_role_id(::google::protobuf::int32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.UserInfo.role_id)
}

// int32 rank = 17;
void UserInfo::clear_rank() {
  rank_ = 0;
}
::google::protobuf::int32 UserInfo::rank() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.rank)
  return rank_;
}
void UserInfo::set_rank(::google::protobuf::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.UserInfo.rank)
}

// int32 coin = 18;
void UserInfo::clear_coin() {
  coin_ = 0;
}
::google::protobuf::int32 UserInfo::coin() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.coin)
  return coin_;
}
void UserInfo::set_coin(::google::protobuf::int32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.UserInfo.coin)
}

// int32 exp = 19;
void UserInfo::clear_exp() {
  exp_ = 0;
}
::google::protobuf::int32 UserInfo::exp() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.exp)
  return exp_;
}
void UserInfo::set_exp(::google::protobuf::int32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.UserInfo.exp)
}

// repeated .battlespheresproto.SkillInfo skill_infos = 21;
int UserInfo::skill_infos_size() const {
  return skill_infos_.size();
}
void UserInfo::clear_skill_infos() {
  skill_infos_.Clear();
}
const ::battlespheresproto::SkillInfo& UserInfo::skill_infos(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.skill_infos)
  return skill_infos_.Get(index);
}
::battlespheresproto::SkillInfo* UserInfo::mutable_skill_infos(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.UserInfo.skill_infos)
  return skill_infos_.Mutable(index);
}
::battlespheresproto::SkillInfo* UserInfo::add_skill_infos() {
  // @@protoc_insertion_point(field_add:battlespheresproto.UserInfo.skill_infos)
  return skill_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::SkillInfo >*
UserInfo::mutable_skill_infos() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.UserInfo.skill_infos)
  return &skill_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::SkillInfo >&
UserInfo::skill_infos() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.UserInfo.skill_infos)
  return skill_infos_;
}

// repeated .battlespheresproto.WeaponInfo weapon_infos = 22;
int UserInfo::weapon_infos_size() const {
  return weapon_infos_.size();
}
void UserInfo::clear_weapon_infos() {
  weapon_infos_.Clear();
}
const ::battlespheresproto::WeaponInfo& UserInfo::weapon_infos(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.weapon_infos)
  return weapon_infos_.Get(index);
}
::battlespheresproto::WeaponInfo* UserInfo::mutable_weapon_infos(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.UserInfo.weapon_infos)
  return weapon_infos_.Mutable(index);
}
::battlespheresproto::WeaponInfo* UserInfo::add_weapon_infos() {
  // @@protoc_insertion_point(field_add:battlespheresproto.UserInfo.weapon_infos)
  return weapon_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponInfo >*
UserInfo::mutable_weapon_infos() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.UserInfo.weapon_infos)
  return &weapon_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponInfo >&
UserInfo::weapon_infos() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.UserInfo.weapon_infos)
  return weapon_infos_;
}

// .battlespheresproto.MissionProgressInfo mission_progress_info = 31;
bool UserInfo::has_mission_progress_info() const {
  return this != internal_default_instance() && mission_progress_info_ != NULL;
}
void UserInfo::clear_mission_progress_info() {
  if (GetArenaNoVirtual() == NULL && mission_progress_info_ != NULL) delete mission_progress_info_;
  mission_progress_info_ = NULL;
}
const ::battlespheresproto::MissionProgressInfo& UserInfo::mission_progress_info() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.mission_progress_info)
  return mission_progress_info_ != NULL ? *mission_progress_info_
                         : *::battlespheresproto::MissionProgressInfo::internal_default_instance();
}
::battlespheresproto::MissionProgressInfo* UserInfo::mutable_mission_progress_info() {
  
  if (mission_progress_info_ == NULL) {
    mission_progress_info_ = new ::battlespheresproto::MissionProgressInfo;
  }
  // @@protoc_insertion_point(field_mutable:battlespheresproto.UserInfo.mission_progress_info)
  return mission_progress_info_;
}
::battlespheresproto::MissionProgressInfo* UserInfo::release_mission_progress_info() {
  // @@protoc_insertion_point(field_release:battlespheresproto.UserInfo.mission_progress_info)
  
  ::battlespheresproto::MissionProgressInfo* temp = mission_progress_info_;
  mission_progress_info_ = NULL;
  return temp;
}
void UserInfo::set_allocated_mission_progress_info(::battlespheresproto::MissionProgressInfo* mission_progress_info) {
  delete mission_progress_info_;
  mission_progress_info_ = mission_progress_info;
  if (mission_progress_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.UserInfo.mission_progress_info)
}

// repeated .battlespheresproto.MissionInfo mission_infos = 32;
int UserInfo::mission_infos_size() const {
  return mission_infos_.size();
}
void UserInfo::clear_mission_infos() {
  mission_infos_.Clear();
}
const ::battlespheresproto::MissionInfo& UserInfo::mission_infos(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.UserInfo.mission_infos)
  return mission_infos_.Get(index);
}
::battlespheresproto::MissionInfo* UserInfo::mutable_mission_infos(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.UserInfo.mission_infos)
  return mission_infos_.Mutable(index);
}
::battlespheresproto::MissionInfo* UserInfo::add_mission_infos() {
  // @@protoc_insertion_point(field_add:battlespheresproto.UserInfo.mission_infos)
  return mission_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::MissionInfo >*
UserInfo::mutable_mission_infos() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.UserInfo.mission_infos)
  return &mission_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::MissionInfo >&
UserInfo::mission_infos() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.UserInfo.mission_infos)
  return mission_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReq::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReq::LoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.LoginReq)
}

void LoginReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginReq& LoginReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginReq* LoginReq::New(::google::protobuf::Arena* arena) const {
  LoginReq* n = new LoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.LoginReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.LoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "battlespheresproto.LoginReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "battlespheresproto.LoginReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.LoginReq)
}

::google::protobuf::uint8* LoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "battlespheresproto.LoginReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.LoginReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.LoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.LoginReq)
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReq::InternalSwap(LoginReq* other) {
  token_.Swap(&other->token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReq

// string token = 1;
void LoginReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginReq::token() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.LoginReq.token)
  return token_.GetNoArena();
}
void LoginReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:battlespheresproto.LoginReq.token)
}
#if LANG_CXX11
void LoginReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battlespheresproto.LoginReq.token)
}
#endif
void LoginReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battlespheresproto.LoginReq.token)
}
void LoginReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battlespheresproto.LoginReq.token)
}
::std::string* LoginReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:battlespheresproto.LoginReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_token() {
  // @@protoc_insertion_point(field_release:battlespheresproto.LoginReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.LoginReq.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRsp::kResultFieldNumber;
const int LoginRsp::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRsp::LoginRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.LoginRsp)
}
LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&result_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.LoginRsp)
}

void LoginRsp::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&result_) + sizeof(timestamp_));
  _cached_size_ = 0;
}

LoginRsp::~LoginRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.LoginRsp)
  SharedDtor();
}

void LoginRsp::SharedDtor() {
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRsp& LoginRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRsp* LoginRsp::New(::google::protobuf::Arena* arena) const {
  LoginRsp* n = new LoginRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.LoginRsp)
  ::memset(&result_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&result_) + sizeof(timestamp_));
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.LoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.LoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.LoginRsp)
  return false;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.LoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.LoginRsp)
}

::google::protobuf::uint8* LoginRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.LoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.LoginRsp)
  return target;
}

size_t LoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.LoginRsp)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.LoginRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.LoginRsp)
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRsp::InternalSwap(LoginRsp* other) {
  std::swap(result_, other->result_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRsp

// int32 result = 1;
void LoginRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 LoginRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.LoginRsp.result)
  return result_;
}
void LoginRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.LoginRsp.result)
}

// int32 timestamp = 2;
void LoginRsp::clear_timestamp() {
  timestamp_ = 0;
}
::google::protobuf::int32 LoginRsp::timestamp() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.LoginRsp.timestamp)
  return timestamp_;
}
void LoginRsp::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.LoginRsp.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoleReq::kRoleIdFieldNumber;
const int CreateRoleReq::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoleReq::CreateRoleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.CreateRoleReq)
}
CreateRoleReq::CreateRoleReq(const CreateRoleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.CreateRoleReq)
}

void CreateRoleReq::SharedCtor() {
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roleid_ = 0;
  _cached_size_ = 0;
}

CreateRoleReq::~CreateRoleReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.CreateRoleReq)
  SharedDtor();
}

void CreateRoleReq::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoleReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRoleReq& CreateRoleReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRoleReq* CreateRoleReq::New(::google::protobuf::Arena* arena) const {
  CreateRoleReq* n = new CreateRoleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRoleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.CreateRoleReq)
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roleid_ = 0;
}

bool CreateRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.CreateRoleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roleId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.CreateRoleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.CreateRoleReq)
  return false;
#undef DO_
}

void CreateRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.CreateRoleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roleId = 1;
  if (this->roleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.CreateRoleReq)
}

::google::protobuf::uint8* CreateRoleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.CreateRoleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roleId = 1;
  if (this->roleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nickname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.CreateRoleReq)
  return target;
}

size_t CreateRoleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.CreateRoleReq)
  size_t total_size = 0;

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nickname());
  }

  // int32 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roleid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.CreateRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.CreateRoleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.CreateRoleReq)
    MergeFrom(*source);
  }
}

void CreateRoleReq::MergeFrom(const CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.CreateRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.roleid() != 0) {
    set_roleid(from.roleid());
  }
}

void CreateRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.CreateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleReq::CopyFrom(const CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.CreateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleReq::IsInitialized() const {
  return true;
}

void CreateRoleReq::Swap(CreateRoleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoleReq::InternalSwap(CreateRoleReq* other) {
  nickname_.Swap(&other->nickname_);
  std::swap(roleid_, other->roleid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoleReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRoleReq

// int32 roleId = 1;
void CreateRoleReq::clear_roleid() {
  roleid_ = 0;
}
::google::protobuf::int32 CreateRoleReq::roleid() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.CreateRoleReq.roleId)
  return roleid_;
}
void CreateRoleReq::set_roleid(::google::protobuf::int32 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.CreateRoleReq.roleId)
}

// bytes nickname = 2;
void CreateRoleReq::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateRoleReq::nickname() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.CreateRoleReq.nickname)
  return nickname_.GetNoArena();
}
void CreateRoleReq::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:battlespheresproto.CreateRoleReq.nickname)
}
#if LANG_CXX11
void CreateRoleReq::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battlespheresproto.CreateRoleReq.nickname)
}
#endif
void CreateRoleReq::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battlespheresproto.CreateRoleReq.nickname)
}
void CreateRoleReq::set_nickname(const void* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battlespheresproto.CreateRoleReq.nickname)
}
::std::string* CreateRoleReq::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:battlespheresproto.CreateRoleReq.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateRoleReq::release_nickname() {
  // @@protoc_insertion_point(field_release:battlespheresproto.CreateRoleReq.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateRoleReq::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.CreateRoleReq.nickname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoleRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoleRsp::CreateRoleRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.CreateRoleRsp)
}
CreateRoleRsp::CreateRoleRsp(const CreateRoleRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.CreateRoleRsp)
}

void CreateRoleRsp::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

CreateRoleRsp::~CreateRoleRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.CreateRoleRsp)
  SharedDtor();
}

void CreateRoleRsp::SharedDtor() {
}

void CreateRoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoleRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRoleRsp& CreateRoleRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRoleRsp* CreateRoleRsp::New(::google::protobuf::Arena* arena) const {
  CreateRoleRsp* n = new CreateRoleRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRoleRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.CreateRoleRsp)
  result_ = 0;
}

bool CreateRoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.CreateRoleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.CreateRoleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.CreateRoleRsp)
  return false;
#undef DO_
}

void CreateRoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.CreateRoleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.CreateRoleRsp)
}

::google::protobuf::uint8* CreateRoleRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.CreateRoleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.CreateRoleRsp)
  return target;
}

size_t CreateRoleRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.CreateRoleRsp)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.CreateRoleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoleRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoleRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.CreateRoleRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.CreateRoleRsp)
    MergeFrom(*source);
  }
}

void CreateRoleRsp::MergeFrom(const CreateRoleRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.CreateRoleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CreateRoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.CreateRoleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleRsp::CopyFrom(const CreateRoleRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.CreateRoleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleRsp::IsInitialized() const {
  return true;
}

void CreateRoleRsp::Swap(CreateRoleRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoleRsp::InternalSwap(CreateRoleRsp* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoleRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRoleRsp

// int32 result = 1;
void CreateRoleRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 CreateRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.CreateRoleRsp.result)
  return result_;
}
void CreateRoleRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.CreateRoleRsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadUserDataRsp::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadUserDataRsp::LoadUserDataRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.LoadUserDataRsp)
}
LoadUserDataRsp::LoadUserDataRsp(const LoadUserDataRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::battlespheresproto::UserInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.LoadUserDataRsp)
}

void LoadUserDataRsp::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

LoadUserDataRsp::~LoadUserDataRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.LoadUserDataRsp)
  SharedDtor();
}

void LoadUserDataRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void LoadUserDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadUserDataRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoadUserDataRsp& LoadUserDataRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoadUserDataRsp* LoadUserDataRsp::New(::google::protobuf::Arena* arena) const {
  LoadUserDataRsp* n = new LoadUserDataRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadUserDataRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.LoadUserDataRsp)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}

bool LoadUserDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.LoadUserDataRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .battlespheresproto.UserInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.LoadUserDataRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.LoadUserDataRsp)
  return false;
#undef DO_
}

void LoadUserDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.LoadUserDataRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .battlespheresproto.UserInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.LoadUserDataRsp)
}

::google::protobuf::uint8* LoadUserDataRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.LoadUserDataRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .battlespheresproto.UserInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.LoadUserDataRsp)
  return target;
}

size_t LoadUserDataRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.LoadUserDataRsp)
  size_t total_size = 0;

  // .battlespheresproto.UserInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadUserDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.LoadUserDataRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadUserDataRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadUserDataRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.LoadUserDataRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.LoadUserDataRsp)
    MergeFrom(*source);
  }
}

void LoadUserDataRsp::MergeFrom(const LoadUserDataRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.LoadUserDataRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::battlespheresproto::UserInfo::MergeFrom(from.info());
  }
}

void LoadUserDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.LoadUserDataRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadUserDataRsp::CopyFrom(const LoadUserDataRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.LoadUserDataRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadUserDataRsp::IsInitialized() const {
  return true;
}

void LoadUserDataRsp::Swap(LoadUserDataRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadUserDataRsp::InternalSwap(LoadUserDataRsp* other) {
  std::swap(info_, other->info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadUserDataRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadUserDataRsp

// .battlespheresproto.UserInfo info = 1;
bool LoadUserDataRsp::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void LoadUserDataRsp::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::battlespheresproto::UserInfo& LoadUserDataRsp::info() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.LoadUserDataRsp.info)
  return info_ != NULL ? *info_
                         : *::battlespheresproto::UserInfo::internal_default_instance();
}
::battlespheresproto::UserInfo* LoadUserDataRsp::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::battlespheresproto::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:battlespheresproto.LoadUserDataRsp.info)
  return info_;
}
::battlespheresproto::UserInfo* LoadUserDataRsp::release_info() {
  // @@protoc_insertion_point(field_release:battlespheresproto.LoadUserDataRsp.info)
  
  ::battlespheresproto::UserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void LoadUserDataRsp::set_allocated_info(::battlespheresproto::UserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.LoadUserDataRsp.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerStatus::kIdFieldNumber;
const int PlayerStatus::kIsOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerStatus::PlayerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.PlayerStatus)
}
PlayerStatus::PlayerStatus(const PlayerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&isonline_) -
    reinterpret_cast<char*>(&id_) + sizeof(isonline_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.PlayerStatus)
}

void PlayerStatus::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&isonline_) -
    reinterpret_cast<char*>(&id_) + sizeof(isonline_));
  _cached_size_ = 0;
}

PlayerStatus::~PlayerStatus() {
  // @@protoc_insertion_point(destructor:battlespheresproto.PlayerStatus)
  SharedDtor();
}

void PlayerStatus::SharedDtor() {
}

void PlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStatus::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerStatus& PlayerStatus::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerStatus* PlayerStatus::New(::google::protobuf::Arena* arena) const {
  PlayerStatus* n = new PlayerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.PlayerStatus)
  ::memset(&id_, 0, reinterpret_cast<char*>(&isonline_) -
    reinterpret_cast<char*>(&id_) + sizeof(isonline_));
}

bool PlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.PlayerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isOnline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.PlayerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.PlayerStatus)
  return false;
#undef DO_
}

void PlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.PlayerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // bool isOnline = 2;
  if (this->isonline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isonline(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.PlayerStatus)
}

::google::protobuf::uint8* PlayerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.PlayerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // bool isOnline = 2;
  if (this->isonline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isonline(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.PlayerStatus)
  return target;
}

size_t PlayerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.PlayerStatus)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // bool isOnline = 2;
  if (this->isonline() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.PlayerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.PlayerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.PlayerStatus)
    MergeFrom(*source);
  }
}

void PlayerStatus::MergeFrom(const PlayerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.PlayerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.isonline() != 0) {
    set_isonline(from.isonline());
  }
}

void PlayerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.PlayerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStatus::CopyFrom(const PlayerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.PlayerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatus::IsInitialized() const {
  return true;
}

void PlayerStatus::Swap(PlayerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerStatus::InternalSwap(PlayerStatus* other) {
  std::swap(id_, other->id_);
  std::swap(isonline_, other->isonline_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerStatus::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerStatus

// int32 id = 1;
void PlayerStatus::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 PlayerStatus::id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.PlayerStatus.id)
  return id_;
}
void PlayerStatus::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.PlayerStatus.id)
}

// bool isOnline = 2;
void PlayerStatus::clear_isonline() {
  isonline_ = false;
}
bool PlayerStatus::isonline() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.PlayerStatus.isOnline)
  return isonline_;
}
void PlayerStatus::set_isonline(bool value) {
  
  isonline_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.PlayerStatus.isOnline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerInfo::kUserIdFieldNumber;
const int RoomPlayerInfo::kNicknameFieldNumber;
const int RoomPlayerInfo::kWeaponInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerInfo::RoomPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.RoomPlayerInfo)
}
RoomPlayerInfo::RoomPlayerInfo(const RoomPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      weapon_infos_(from.weapon_infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.RoomPlayerInfo)
}

void RoomPlayerInfo::SharedCtor() {
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
  _cached_size_ = 0;
}

RoomPlayerInfo::~RoomPlayerInfo() {
  // @@protoc_insertion_point(destructor:battlespheresproto.RoomPlayerInfo)
  SharedDtor();
}

void RoomPlayerInfo::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerInfo::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomPlayerInfo& RoomPlayerInfo::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerInfo* RoomPlayerInfo::New(::google::protobuf::Arena* arena) const {
  RoomPlayerInfo* n = new RoomPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.RoomPlayerInfo)
  weapon_infos_.Clear();
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

bool RoomPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.RoomPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nickname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .battlespheresproto.WeaponInfo weapon_infos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.RoomPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.RoomPlayerInfo)
  return false;
#undef DO_
}

void RoomPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.RoomPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // bytes nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nickname(), output);
  }

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 4;
  for (unsigned int i = 0, n = this->weapon_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->weapon_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.RoomPlayerInfo)
}

::google::protobuf::uint8* RoomPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.RoomPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // bytes nickname = 3;
  if (this->nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nickname(), target);
  }

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 4;
  for (unsigned int i = 0, n = this->weapon_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->weapon_infos(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.RoomPlayerInfo)
  return target;
}

size_t RoomPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.RoomPlayerInfo)
  size_t total_size = 0;

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 4;
  {
    unsigned int count = this->weapon_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_infos(i));
    }
  }

  // bytes nickname = 3;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nickname());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.RoomPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.RoomPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.RoomPlayerInfo)
    MergeFrom(*source);
  }
}

void RoomPlayerInfo::MergeFrom(const RoomPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.RoomPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weapon_infos_.MergeFrom(from.weapon_infos_);
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void RoomPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.RoomPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerInfo::CopyFrom(const RoomPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.RoomPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerInfo::IsInitialized() const {
  return true;
}

void RoomPlayerInfo::Swap(RoomPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerInfo::InternalSwap(RoomPlayerInfo* other) {
  weapon_infos_.InternalSwap(&other->weapon_infos_);
  nickname_.Swap(&other->nickname_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerInfo::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerInfo

// int32 user_id = 1;
void RoomPlayerInfo::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 RoomPlayerInfo::user_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.RoomPlayerInfo.user_id)
  return user_id_;
}
void RoomPlayerInfo::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.RoomPlayerInfo.user_id)
}

// bytes nickname = 3;
void RoomPlayerInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RoomPlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.RoomPlayerInfo.nickname)
  return nickname_.GetNoArena();
}
void RoomPlayerInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:battlespheresproto.RoomPlayerInfo.nickname)
}
#if LANG_CXX11
void RoomPlayerInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:battlespheresproto.RoomPlayerInfo.nickname)
}
#endif
void RoomPlayerInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:battlespheresproto.RoomPlayerInfo.nickname)
}
void RoomPlayerInfo::set_nickname(const void* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:battlespheresproto.RoomPlayerInfo.nickname)
}
::std::string* RoomPlayerInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:battlespheresproto.RoomPlayerInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoomPlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:battlespheresproto.RoomPlayerInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoomPlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.RoomPlayerInfo.nickname)
}

// repeated .battlespheresproto.WeaponInfo weapon_infos = 4;
int RoomPlayerInfo::weapon_infos_size() const {
  return weapon_infos_.size();
}
void RoomPlayerInfo::clear_weapon_infos() {
  weapon_infos_.Clear();
}
const ::battlespheresproto::WeaponInfo& RoomPlayerInfo::weapon_infos(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.RoomPlayerInfo.weapon_infos)
  return weapon_infos_.Get(index);
}
::battlespheresproto::WeaponInfo* RoomPlayerInfo::mutable_weapon_infos(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.RoomPlayerInfo.weapon_infos)
  return weapon_infos_.Mutable(index);
}
::battlespheresproto::WeaponInfo* RoomPlayerInfo::add_weapon_infos() {
  // @@protoc_insertion_point(field_add:battlespheresproto.RoomPlayerInfo.weapon_infos)
  return weapon_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponInfo >*
RoomPlayerInfo::mutable_weapon_infos() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.RoomPlayerInfo.weapon_infos)
  return &weapon_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponInfo >&
RoomPlayerInfo::weapon_infos() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.RoomPlayerInfo.weapon_infos)
  return weapon_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DismissRoomEvent::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DismissRoomEvent::DismissRoomEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.DismissRoomEvent)
}
DismissRoomEvent::DismissRoomEvent(const DismissRoomEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.DismissRoomEvent)
}

void DismissRoomEvent::SharedCtor() {
  reason_ = 0;
  _cached_size_ = 0;
}

DismissRoomEvent::~DismissRoomEvent() {
  // @@protoc_insertion_point(destructor:battlespheresproto.DismissRoomEvent)
  SharedDtor();
}

void DismissRoomEvent::SharedDtor() {
}

void DismissRoomEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DismissRoomEvent::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DismissRoomEvent& DismissRoomEvent::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

DismissRoomEvent* DismissRoomEvent::New(::google::protobuf::Arena* arena) const {
  DismissRoomEvent* n = new DismissRoomEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DismissRoomEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.DismissRoomEvent)
  reason_ = 0;
}

bool DismissRoomEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.DismissRoomEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.DismissRoomEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.DismissRoomEvent)
  return false;
#undef DO_
}

void DismissRoomEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.DismissRoomEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reason = 1;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.DismissRoomEvent)
}

::google::protobuf::uint8* DismissRoomEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.DismissRoomEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reason = 1;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.DismissRoomEvent)
  return target;
}

size_t DismissRoomEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.DismissRoomEvent)
  size_t total_size = 0;

  // int32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DismissRoomEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.DismissRoomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DismissRoomEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DismissRoomEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.DismissRoomEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.DismissRoomEvent)
    MergeFrom(*source);
  }
}

void DismissRoomEvent::MergeFrom(const DismissRoomEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.DismissRoomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void DismissRoomEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.DismissRoomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DismissRoomEvent::CopyFrom(const DismissRoomEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.DismissRoomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DismissRoomEvent::IsInitialized() const {
  return true;
}

void DismissRoomEvent::Swap(DismissRoomEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DismissRoomEvent::InternalSwap(DismissRoomEvent* other) {
  std::swap(reason_, other->reason_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DismissRoomEvent::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DismissRoomEvent

// int32 reason = 1;
void DismissRoomEvent::clear_reason() {
  reason_ = 0;
}
::google::protobuf::int32 DismissRoomEvent::reason() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.DismissRoomEvent.reason)
  return reason_;
}
void DismissRoomEvent::set_reason(::google::protobuf::int32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.DismissRoomEvent.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomReq::kRoomIdFieldNumber;
const int JoinRoomReq::kLevelIdFieldNumber;
const int JoinRoomReq::kModeFieldNumber;
const int JoinRoomReq::kPrivateFieldNumber;
const int JoinRoomReq::kWeaponInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomReq::JoinRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.JoinRoomReq)
}
JoinRoomReq::JoinRoomReq(const JoinRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      weapon_infos_(from.weapon_infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_id_, &from.room_id_,
    reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&room_id_) + sizeof(private__));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.JoinRoomReq)
}

void JoinRoomReq::SharedCtor() {
  ::memset(&room_id_, 0, reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&room_id_) + sizeof(private__));
  _cached_size_ = 0;
}

JoinRoomReq::~JoinRoomReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.JoinRoomReq)
  SharedDtor();
}

void JoinRoomReq::SharedDtor() {
}

void JoinRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinRoomReq& JoinRoomReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinRoomReq* JoinRoomReq::New(::google::protobuf::Arena* arena) const {
  JoinRoomReq* n = new JoinRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.JoinRoomReq)
  weapon_infos_.Clear();
  ::memset(&room_id_, 0, reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&room_id_) + sizeof(private__));
}

bool JoinRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.JoinRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool private = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .battlespheresproto.WeaponInfo weapon_infos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.JoinRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.JoinRoomReq)
  return false;
#undef DO_
}

void JoinRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.JoinRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // int32 level_id = 2;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level_id(), output);
  }

  // int32 mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // bool private = 4;
  if (this->private_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->private_(), output);
  }

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 5;
  for (unsigned int i = 0, n = this->weapon_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->weapon_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.JoinRoomReq)
}

::google::protobuf::uint8* JoinRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.JoinRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // int32 level_id = 2;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level_id(), target);
  }

  // int32 mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode(), target);
  }

  // bool private = 4;
  if (this->private_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->private_(), target);
  }

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 5;
  for (unsigned int i = 0, n = this->weapon_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->weapon_infos(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.JoinRoomReq)
  return target;
}

size_t JoinRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.JoinRoomReq)
  size_t total_size = 0;

  // repeated .battlespheresproto.WeaponInfo weapon_infos = 5;
  {
    unsigned int count = this->weapon_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_infos(i));
    }
  }

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // int32 level_id = 2;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_id());
  }

  // int32 mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mode());
  }

  // bool private = 4;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.JoinRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.JoinRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.JoinRoomReq)
    MergeFrom(*source);
  }
}

void JoinRoomReq::MergeFrom(const JoinRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.JoinRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weapon_infos_.MergeFrom(from.weapon_infos_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.private_() != 0) {
    set_private_(from.private_());
  }
}

void JoinRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.JoinRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomReq::CopyFrom(const JoinRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.JoinRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomReq::IsInitialized() const {
  return true;
}

void JoinRoomReq::Swap(JoinRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomReq::InternalSwap(JoinRoomReq* other) {
  weapon_infos_.InternalSwap(&other->weapon_infos_);
  std::swap(room_id_, other->room_id_);
  std::swap(level_id_, other->level_id_);
  std::swap(mode_, other->mode_);
  std::swap(private__, other->private__);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinRoomReq

// int32 room_id = 1;
void JoinRoomReq::clear_room_id() {
  room_id_ = 0;
}
::google::protobuf::int32 JoinRoomReq::room_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomReq.room_id)
  return room_id_;
}
void JoinRoomReq::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.JoinRoomReq.room_id)
}

// int32 level_id = 2;
void JoinRoomReq::clear_level_id() {
  level_id_ = 0;
}
::google::protobuf::int32 JoinRoomReq::level_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomReq.level_id)
  return level_id_;
}
void JoinRoomReq::set_level_id(::google::protobuf::int32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.JoinRoomReq.level_id)
}

// int32 mode = 3;
void JoinRoomReq::clear_mode() {
  mode_ = 0;
}
::google::protobuf::int32 JoinRoomReq::mode() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomReq.mode)
  return mode_;
}
void JoinRoomReq::set_mode(::google::protobuf::int32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.JoinRoomReq.mode)
}

// bool private = 4;
void JoinRoomReq::clear_private_() {
  private__ = false;
}
bool JoinRoomReq::private_() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomReq.private)
  return private__;
}
void JoinRoomReq::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.JoinRoomReq.private)
}

// repeated .battlespheresproto.WeaponInfo weapon_infos = 5;
int JoinRoomReq::weapon_infos_size() const {
  return weapon_infos_.size();
}
void JoinRoomReq::clear_weapon_infos() {
  weapon_infos_.Clear();
}
const ::battlespheresproto::WeaponInfo& JoinRoomReq::weapon_infos(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomReq.weapon_infos)
  return weapon_infos_.Get(index);
}
::battlespheresproto::WeaponInfo* JoinRoomReq::mutable_weapon_infos(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.JoinRoomReq.weapon_infos)
  return weapon_infos_.Mutable(index);
}
::battlespheresproto::WeaponInfo* JoinRoomReq::add_weapon_infos() {
  // @@protoc_insertion_point(field_add:battlespheresproto.JoinRoomReq.weapon_infos)
  return weapon_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponInfo >*
JoinRoomReq::mutable_weapon_infos() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.JoinRoomReq.weapon_infos)
  return &weapon_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponInfo >&
JoinRoomReq::weapon_infos() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.JoinRoomReq.weapon_infos)
  return weapon_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomRsp::kResultFieldNumber;
const int JoinRoomRsp::kRoomIdFieldNumber;
const int JoinRoomRsp::kLevelIdFieldNumber;
const int JoinRoomRsp::kOwnerIdFieldNumber;
const int JoinRoomRsp::kOtherPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomRsp::JoinRoomRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.JoinRoomRsp)
}
JoinRoomRsp::JoinRoomRsp(const JoinRoomRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      other_players_(from.other_players_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.JoinRoomRsp)
}

void JoinRoomRsp::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(owner_id_));
  _cached_size_ = 0;
}

JoinRoomRsp::~JoinRoomRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.JoinRoomRsp)
  SharedDtor();
}

void JoinRoomRsp::SharedDtor() {
}

void JoinRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinRoomRsp& JoinRoomRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinRoomRsp* JoinRoomRsp::New(::google::protobuf::Arena* arena) const {
  JoinRoomRsp* n = new JoinRoomRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.JoinRoomRsp)
  other_players_.Clear();
  ::memset(&result_, 0, reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(owner_id_));
}

bool JoinRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.JoinRoomRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 owner_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .battlespheresproto.RoomPlayerInfo other_players = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_other_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.JoinRoomRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.JoinRoomRsp)
  return false;
#undef DO_
}

void JoinRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.JoinRoomRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // int32 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // int32 level_id = 3;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level_id(), output);
  }

  // int32 owner_id = 4;
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->owner_id(), output);
  }

  // repeated .battlespheresproto.RoomPlayerInfo other_players = 5;
  for (unsigned int i = 0, n = this->other_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->other_players(i), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.JoinRoomRsp)
}

::google::protobuf::uint8* JoinRoomRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.JoinRoomRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // int32 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // int32 level_id = 3;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level_id(), target);
  }

  // int32 owner_id = 4;
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->owner_id(), target);
  }

  // repeated .battlespheresproto.RoomPlayerInfo other_players = 5;
  for (unsigned int i = 0, n = this->other_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->other_players(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.JoinRoomRsp)
  return target;
}

size_t JoinRoomRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.JoinRoomRsp)
  size_t total_size = 0;

  // repeated .battlespheresproto.RoomPlayerInfo other_players = 5;
  {
    unsigned int count = this->other_players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other_players(i));
    }
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // int32 level_id = 3;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_id());
  }

  // int32 owner_id = 4;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.JoinRoomRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRoomRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.JoinRoomRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.JoinRoomRsp)
    MergeFrom(*source);
  }
}

void JoinRoomRsp::MergeFrom(const JoinRoomRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.JoinRoomRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_players_.MergeFrom(from.other_players_);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
}

void JoinRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.JoinRoomRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomRsp::CopyFrom(const JoinRoomRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.JoinRoomRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomRsp::IsInitialized() const {
  return true;
}

void JoinRoomRsp::Swap(JoinRoomRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomRsp::InternalSwap(JoinRoomRsp* other) {
  other_players_.InternalSwap(&other->other_players_);
  std::swap(result_, other->result_);
  std::swap(room_id_, other->room_id_);
  std::swap(level_id_, other->level_id_);
  std::swap(owner_id_, other->owner_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinRoomRsp

// int32 result = 1;
void JoinRoomRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 JoinRoomRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomRsp.result)
  return result_;
}
void JoinRoomRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.JoinRoomRsp.result)
}

// int32 room_id = 2;
void JoinRoomRsp::clear_room_id() {
  room_id_ = 0;
}
::google::protobuf::int32 JoinRoomRsp::room_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomRsp.room_id)
  return room_id_;
}
void JoinRoomRsp::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.JoinRoomRsp.room_id)
}

// int32 level_id = 3;
void JoinRoomRsp::clear_level_id() {
  level_id_ = 0;
}
::google::protobuf::int32 JoinRoomRsp::level_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomRsp.level_id)
  return level_id_;
}
void JoinRoomRsp::set_level_id(::google::protobuf::int32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.JoinRoomRsp.level_id)
}

// int32 owner_id = 4;
void JoinRoomRsp::clear_owner_id() {
  owner_id_ = 0;
}
::google::protobuf::int32 JoinRoomRsp::owner_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomRsp.owner_id)
  return owner_id_;
}
void JoinRoomRsp::set_owner_id(::google::protobuf::int32 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.JoinRoomRsp.owner_id)
}

// repeated .battlespheresproto.RoomPlayerInfo other_players = 5;
int JoinRoomRsp::other_players_size() const {
  return other_players_.size();
}
void JoinRoomRsp::clear_other_players() {
  other_players_.Clear();
}
const ::battlespheresproto::RoomPlayerInfo& JoinRoomRsp::other_players(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomRsp.other_players)
  return other_players_.Get(index);
}
::battlespheresproto::RoomPlayerInfo* JoinRoomRsp::mutable_other_players(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.JoinRoomRsp.other_players)
  return other_players_.Mutable(index);
}
::battlespheresproto::RoomPlayerInfo* JoinRoomRsp::add_other_players() {
  // @@protoc_insertion_point(field_add:battlespheresproto.JoinRoomRsp.other_players)
  return other_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::RoomPlayerInfo >*
JoinRoomRsp::mutable_other_players() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.JoinRoomRsp.other_players)
  return &other_players_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::RoomPlayerInfo >&
JoinRoomRsp::other_players() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.JoinRoomRsp.other_players)
  return other_players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomEvent::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomEvent::JoinRoomEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.JoinRoomEvent)
}
JoinRoomEvent::JoinRoomEvent(const JoinRoomEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::battlespheresproto::RoomPlayerInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.JoinRoomEvent)
}

void JoinRoomEvent::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

JoinRoomEvent::~JoinRoomEvent() {
  // @@protoc_insertion_point(destructor:battlespheresproto.JoinRoomEvent)
  SharedDtor();
}

void JoinRoomEvent::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void JoinRoomEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomEvent::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinRoomEvent& JoinRoomEvent::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinRoomEvent* JoinRoomEvent::New(::google::protobuf::Arena* arena) const {
  JoinRoomEvent* n = new JoinRoomEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.JoinRoomEvent)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}

bool JoinRoomEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.JoinRoomEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .battlespheresproto.RoomPlayerInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.JoinRoomEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.JoinRoomEvent)
  return false;
#undef DO_
}

void JoinRoomEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.JoinRoomEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .battlespheresproto.RoomPlayerInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.JoinRoomEvent)
}

::google::protobuf::uint8* JoinRoomEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.JoinRoomEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .battlespheresproto.RoomPlayerInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.JoinRoomEvent)
  return target;
}

size_t JoinRoomEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.JoinRoomEvent)
  size_t total_size = 0;

  // .battlespheresproto.RoomPlayerInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.JoinRoomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRoomEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.JoinRoomEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.JoinRoomEvent)
    MergeFrom(*source);
  }
}

void JoinRoomEvent::MergeFrom(const JoinRoomEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.JoinRoomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::battlespheresproto::RoomPlayerInfo::MergeFrom(from.info());
  }
}

void JoinRoomEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.JoinRoomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomEvent::CopyFrom(const JoinRoomEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.JoinRoomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomEvent::IsInitialized() const {
  return true;
}

void JoinRoomEvent::Swap(JoinRoomEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomEvent::InternalSwap(JoinRoomEvent* other) {
  std::swap(info_, other->info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomEvent::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinRoomEvent

// .battlespheresproto.RoomPlayerInfo info = 1;
bool JoinRoomEvent::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void JoinRoomEvent::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::battlespheresproto::RoomPlayerInfo& JoinRoomEvent::info() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.JoinRoomEvent.info)
  return info_ != NULL ? *info_
                         : *::battlespheresproto::RoomPlayerInfo::internal_default_instance();
}
::battlespheresproto::RoomPlayerInfo* JoinRoomEvent::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::battlespheresproto::RoomPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:battlespheresproto.JoinRoomEvent.info)
  return info_;
}
::battlespheresproto::RoomPlayerInfo* JoinRoomEvent::release_info() {
  // @@protoc_insertion_point(field_release:battlespheresproto.JoinRoomEvent.info)
  
  ::battlespheresproto::RoomPlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void JoinRoomEvent::set_allocated_info(::battlespheresproto::RoomPlayerInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.JoinRoomEvent.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitRoomReq::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitRoomReq::QuitRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.QuitRoomReq)
}
QuitRoomReq::QuitRoomReq(const QuitRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.QuitRoomReq)
}

void QuitRoomReq::SharedCtor() {
  room_id_ = 0;
  _cached_size_ = 0;
}

QuitRoomReq::~QuitRoomReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.QuitRoomReq)
  SharedDtor();
}

void QuitRoomReq::SharedDtor() {
}

void QuitRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitRoomReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuitRoomReq& QuitRoomReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitRoomReq* QuitRoomReq::New(::google::protobuf::Arena* arena) const {
  QuitRoomReq* n = new QuitRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.QuitRoomReq)
  room_id_ = 0;
}

bool QuitRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.QuitRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.QuitRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.QuitRoomReq)
  return false;
#undef DO_
}

void QuitRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.QuitRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.QuitRoomReq)
}

::google::protobuf::uint8* QuitRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.QuitRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.QuitRoomReq)
  return target;
}

size_t QuitRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.QuitRoomReq)
  size_t total_size = 0;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.QuitRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.QuitRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.QuitRoomReq)
    MergeFrom(*source);
  }
}

void QuitRoomReq::MergeFrom(const QuitRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.QuitRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void QuitRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.QuitRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitRoomReq::CopyFrom(const QuitRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.QuitRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitRoomReq::IsInitialized() const {
  return true;
}

void QuitRoomReq::Swap(QuitRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitRoomReq::InternalSwap(QuitRoomReq* other) {
  std::swap(room_id_, other->room_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitRoomReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitRoomReq

// int32 room_id = 1;
void QuitRoomReq::clear_room_id() {
  room_id_ = 0;
}
::google::protobuf::int32 QuitRoomReq::room_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.QuitRoomReq.room_id)
  return room_id_;
}
void QuitRoomReq::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.QuitRoomReq.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitRoomRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitRoomRsp::QuitRoomRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.QuitRoomRsp)
}
QuitRoomRsp::QuitRoomRsp(const QuitRoomRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.QuitRoomRsp)
}

void QuitRoomRsp::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

QuitRoomRsp::~QuitRoomRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.QuitRoomRsp)
  SharedDtor();
}

void QuitRoomRsp::SharedDtor() {
}

void QuitRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitRoomRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuitRoomRsp& QuitRoomRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitRoomRsp* QuitRoomRsp::New(::google::protobuf::Arena* arena) const {
  QuitRoomRsp* n = new QuitRoomRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitRoomRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.QuitRoomRsp)
  result_ = 0;
}

bool QuitRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.QuitRoomRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.QuitRoomRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.QuitRoomRsp)
  return false;
#undef DO_
}

void QuitRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.QuitRoomRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.QuitRoomRsp)
}

::google::protobuf::uint8* QuitRoomRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.QuitRoomRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.QuitRoomRsp)
  return target;
}

size_t QuitRoomRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.QuitRoomRsp)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.QuitRoomRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitRoomRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitRoomRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.QuitRoomRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.QuitRoomRsp)
    MergeFrom(*source);
  }
}

void QuitRoomRsp::MergeFrom(const QuitRoomRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.QuitRoomRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void QuitRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.QuitRoomRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitRoomRsp::CopyFrom(const QuitRoomRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.QuitRoomRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitRoomRsp::IsInitialized() const {
  return true;
}

void QuitRoomRsp::Swap(QuitRoomRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitRoomRsp::InternalSwap(QuitRoomRsp* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitRoomRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitRoomRsp

// int32 result = 1;
void QuitRoomRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 QuitRoomRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.QuitRoomRsp.result)
  return result_;
}
void QuitRoomRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.QuitRoomRsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitRoomEvent::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitRoomEvent::QuitRoomEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.QuitRoomEvent)
}
QuitRoomEvent::QuitRoomEvent(const QuitRoomEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.QuitRoomEvent)
}

void QuitRoomEvent::SharedCtor() {
  user_id_ = 0;
  _cached_size_ = 0;
}

QuitRoomEvent::~QuitRoomEvent() {
  // @@protoc_insertion_point(destructor:battlespheresproto.QuitRoomEvent)
  SharedDtor();
}

void QuitRoomEvent::SharedDtor() {
}

void QuitRoomEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitRoomEvent::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuitRoomEvent& QuitRoomEvent::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitRoomEvent* QuitRoomEvent::New(::google::protobuf::Arena* arena) const {
  QuitRoomEvent* n = new QuitRoomEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitRoomEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.QuitRoomEvent)
  user_id_ = 0;
}

bool QuitRoomEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.QuitRoomEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.QuitRoomEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.QuitRoomEvent)
  return false;
#undef DO_
}

void QuitRoomEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.QuitRoomEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.QuitRoomEvent)
}

::google::protobuf::uint8* QuitRoomEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.QuitRoomEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.QuitRoomEvent)
  return target;
}

size_t QuitRoomEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.QuitRoomEvent)
  size_t total_size = 0;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitRoomEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.QuitRoomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitRoomEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitRoomEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.QuitRoomEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.QuitRoomEvent)
    MergeFrom(*source);
  }
}

void QuitRoomEvent::MergeFrom(const QuitRoomEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.QuitRoomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void QuitRoomEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.QuitRoomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitRoomEvent::CopyFrom(const QuitRoomEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.QuitRoomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitRoomEvent::IsInitialized() const {
  return true;
}

void QuitRoomEvent::Swap(QuitRoomEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitRoomEvent::InternalSwap(QuitRoomEvent* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitRoomEvent::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitRoomEvent

// int32 user_id = 1;
void QuitRoomEvent::clear_user_id() {
  user_id_ = 0;
}
::google::protobuf::int32 QuitRoomEvent::user_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.QuitRoomEvent.user_id)
  return user_id_;
}
void QuitRoomEvent::set_user_id(::google::protobuf::int32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.QuitRoomEvent.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuyBuffReq::kBuffIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuyBuffReq::BuyBuffReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.BuyBuffReq)
}
BuyBuffReq::BuyBuffReq(const BuyBuffReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buff_id_ = from.buff_id_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.BuyBuffReq)
}

void BuyBuffReq::SharedCtor() {
  buff_id_ = 0;
  _cached_size_ = 0;
}

BuyBuffReq::~BuyBuffReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.BuyBuffReq)
  SharedDtor();
}

void BuyBuffReq::SharedDtor() {
}

void BuyBuffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyBuffReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuyBuffReq& BuyBuffReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

BuyBuffReq* BuyBuffReq::New(::google::protobuf::Arena* arena) const {
  BuyBuffReq* n = new BuyBuffReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuyBuffReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.BuyBuffReq)
  buff_id_ = 0;
}

bool BuyBuffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.BuyBuffReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 buff_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.BuyBuffReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.BuyBuffReq)
  return false;
#undef DO_
}

void BuyBuffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.BuyBuffReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buff_id = 1;
  if (this->buff_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.BuyBuffReq)
}

::google::protobuf::uint8* BuyBuffReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.BuyBuffReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buff_id = 1;
  if (this->buff_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.BuyBuffReq)
  return target;
}

size_t BuyBuffReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.BuyBuffReq)
  size_t total_size = 0;

  // int32 buff_id = 1;
  if (this->buff_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buff_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyBuffReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.BuyBuffReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BuyBuffReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuyBuffReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.BuyBuffReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.BuyBuffReq)
    MergeFrom(*source);
  }
}

void BuyBuffReq::MergeFrom(const BuyBuffReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.BuyBuffReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buff_id() != 0) {
    set_buff_id(from.buff_id());
  }
}

void BuyBuffReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.BuyBuffReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyBuffReq::CopyFrom(const BuyBuffReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.BuyBuffReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyBuffReq::IsInitialized() const {
  return true;
}

void BuyBuffReq::Swap(BuyBuffReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuyBuffReq::InternalSwap(BuyBuffReq* other) {
  std::swap(buff_id_, other->buff_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuyBuffReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuyBuffReq

// int32 buff_id = 1;
void BuyBuffReq::clear_buff_id() {
  buff_id_ = 0;
}
::google::protobuf::int32 BuyBuffReq::buff_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.BuyBuffReq.buff_id)
  return buff_id_;
}
void BuyBuffReq::set_buff_id(::google::protobuf::int32 value) {
  
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.BuyBuffReq.buff_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuyBuffRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuyBuffRsp::BuyBuffRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.BuyBuffRsp)
}
BuyBuffRsp::BuyBuffRsp(const BuyBuffRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.BuyBuffRsp)
}

void BuyBuffRsp::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

BuyBuffRsp::~BuyBuffRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.BuyBuffRsp)
  SharedDtor();
}

void BuyBuffRsp::SharedDtor() {
}

void BuyBuffRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyBuffRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuyBuffRsp& BuyBuffRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

BuyBuffRsp* BuyBuffRsp::New(::google::protobuf::Arena* arena) const {
  BuyBuffRsp* n = new BuyBuffRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuyBuffRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.BuyBuffRsp)
  result_ = 0;
}

bool BuyBuffRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.BuyBuffRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.BuyBuffRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.BuyBuffRsp)
  return false;
#undef DO_
}

void BuyBuffRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.BuyBuffRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.BuyBuffRsp)
}

::google::protobuf::uint8* BuyBuffRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.BuyBuffRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.BuyBuffRsp)
  return target;
}

size_t BuyBuffRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.BuyBuffRsp)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyBuffRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.BuyBuffRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BuyBuffRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuyBuffRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.BuyBuffRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.BuyBuffRsp)
    MergeFrom(*source);
  }
}

void BuyBuffRsp::MergeFrom(const BuyBuffRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.BuyBuffRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void BuyBuffRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.BuyBuffRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyBuffRsp::CopyFrom(const BuyBuffRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.BuyBuffRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyBuffRsp::IsInitialized() const {
  return true;
}

void BuyBuffRsp::Swap(BuyBuffRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuyBuffRsp::InternalSwap(BuyBuffRsp* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuyBuffRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuyBuffRsp

// int32 result = 1;
void BuyBuffRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 BuyBuffRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.BuyBuffRsp.result)
  return result_;
}
void BuyBuffRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.BuyBuffRsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponBuyReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponBuyReq::WeaponBuyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.WeaponBuyReq)
}
WeaponBuyReq::WeaponBuyReq(const WeaponBuyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.WeaponBuyReq)
}

void WeaponBuyReq::SharedCtor() {
  id_ = 0;
  _cached_size_ = 0;
}

WeaponBuyReq::~WeaponBuyReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.WeaponBuyReq)
  SharedDtor();
}

void WeaponBuyReq::SharedDtor() {
}

void WeaponBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponBuyReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeaponBuyReq& WeaponBuyReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponBuyReq* WeaponBuyReq::New(::google::protobuf::Arena* arena) const {
  WeaponBuyReq* n = new WeaponBuyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponBuyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.WeaponBuyReq)
  id_ = 0;
}

bool WeaponBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.WeaponBuyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.WeaponBuyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.WeaponBuyReq)
  return false;
#undef DO_
}

void WeaponBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.WeaponBuyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.WeaponBuyReq)
}

::google::protobuf::uint8* WeaponBuyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.WeaponBuyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.WeaponBuyReq)
  return target;
}

size_t WeaponBuyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.WeaponBuyReq)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.WeaponBuyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponBuyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponBuyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.WeaponBuyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.WeaponBuyReq)
    MergeFrom(*source);
  }
}

void WeaponBuyReq::MergeFrom(const WeaponBuyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.WeaponBuyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void WeaponBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.WeaponBuyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponBuyReq::CopyFrom(const WeaponBuyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.WeaponBuyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponBuyReq::IsInitialized() const {
  return true;
}

void WeaponBuyReq::Swap(WeaponBuyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponBuyReq::InternalSwap(WeaponBuyReq* other) {
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponBuyReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponBuyReq

// int32 id = 1;
void WeaponBuyReq::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 WeaponBuyReq::id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponBuyReq.id)
  return id_;
}
void WeaponBuyReq::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.WeaponBuyReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponBuyRsp::kResultFieldNumber;
const int WeaponBuyRsp::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponBuyRsp::WeaponBuyRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.WeaponBuyRsp)
}
WeaponBuyRsp::WeaponBuyRsp(const WeaponBuyRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::battlespheresproto::UserInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.WeaponBuyRsp)
}

void WeaponBuyRsp::SharedCtor() {
  ::memset(&info_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&info_) + sizeof(result_));
  _cached_size_ = 0;
}

WeaponBuyRsp::~WeaponBuyRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.WeaponBuyRsp)
  SharedDtor();
}

void WeaponBuyRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void WeaponBuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponBuyRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeaponBuyRsp& WeaponBuyRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponBuyRsp* WeaponBuyRsp::New(::google::protobuf::Arena* arena) const {
  WeaponBuyRsp* n = new WeaponBuyRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponBuyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.WeaponBuyRsp)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  result_ = 0;
}

bool WeaponBuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.WeaponBuyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .battlespheresproto.UserInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.WeaponBuyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.WeaponBuyRsp)
  return false;
#undef DO_
}

void WeaponBuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.WeaponBuyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.WeaponBuyRsp)
}

::google::protobuf::uint8* WeaponBuyRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.WeaponBuyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.WeaponBuyRsp)
  return target;
}

size_t WeaponBuyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.WeaponBuyRsp)
  size_t total_size = 0;

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponBuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.WeaponBuyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponBuyRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponBuyRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.WeaponBuyRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.WeaponBuyRsp)
    MergeFrom(*source);
  }
}

void WeaponBuyRsp::MergeFrom(const WeaponBuyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.WeaponBuyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::battlespheresproto::UserInfo::MergeFrom(from.info());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void WeaponBuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.WeaponBuyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponBuyRsp::CopyFrom(const WeaponBuyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.WeaponBuyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponBuyRsp::IsInitialized() const {
  return true;
}

void WeaponBuyRsp::Swap(WeaponBuyRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponBuyRsp::InternalSwap(WeaponBuyRsp* other) {
  std::swap(info_, other->info_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponBuyRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponBuyRsp

// int32 result = 1;
void WeaponBuyRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 WeaponBuyRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponBuyRsp.result)
  return result_;
}
void WeaponBuyRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.WeaponBuyRsp.result)
}

// .battlespheresproto.UserInfo info = 2;
bool WeaponBuyRsp::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void WeaponBuyRsp::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::battlespheresproto::UserInfo& WeaponBuyRsp::info() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponBuyRsp.info)
  return info_ != NULL ? *info_
                         : *::battlespheresproto::UserInfo::internal_default_instance();
}
::battlespheresproto::UserInfo* WeaponBuyRsp::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::battlespheresproto::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:battlespheresproto.WeaponBuyRsp.info)
  return info_;
}
::battlespheresproto::UserInfo* WeaponBuyRsp::release_info() {
  // @@protoc_insertion_point(field_release:battlespheresproto.WeaponBuyRsp.info)
  
  ::battlespheresproto::UserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void WeaponBuyRsp::set_allocated_info(::battlespheresproto::UserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.WeaponBuyRsp.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponEquipInfo::kIdFieldNumber;
const int WeaponEquipInfo::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponEquipInfo::WeaponEquipInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.WeaponEquipInfo)
}
WeaponEquipInfo::WeaponEquipInfo(const WeaponEquipInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.WeaponEquipInfo)
}

void WeaponEquipInfo::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_) + sizeof(index_));
  _cached_size_ = 0;
}

WeaponEquipInfo::~WeaponEquipInfo() {
  // @@protoc_insertion_point(destructor:battlespheresproto.WeaponEquipInfo)
  SharedDtor();
}

void WeaponEquipInfo::SharedDtor() {
}

void WeaponEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponEquipInfo::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeaponEquipInfo& WeaponEquipInfo::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponEquipInfo* WeaponEquipInfo::New(::google::protobuf::Arena* arena) const {
  WeaponEquipInfo* n = new WeaponEquipInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponEquipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.WeaponEquipInfo)
  ::memset(&id_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&id_) + sizeof(index_));
}

bool WeaponEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.WeaponEquipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.WeaponEquipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.WeaponEquipInfo)
  return false;
#undef DO_
}

void WeaponEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.WeaponEquipInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.WeaponEquipInfo)
}

::google::protobuf::uint8* WeaponEquipInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.WeaponEquipInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.WeaponEquipInfo)
  return target;
}

size_t WeaponEquipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.WeaponEquipInfo)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponEquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.WeaponEquipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponEquipInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponEquipInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.WeaponEquipInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.WeaponEquipInfo)
    MergeFrom(*source);
  }
}

void WeaponEquipInfo::MergeFrom(const WeaponEquipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.WeaponEquipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void WeaponEquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.WeaponEquipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponEquipInfo::CopyFrom(const WeaponEquipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.WeaponEquipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponEquipInfo::IsInitialized() const {
  return true;
}

void WeaponEquipInfo::Swap(WeaponEquipInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponEquipInfo::InternalSwap(WeaponEquipInfo* other) {
  std::swap(id_, other->id_);
  std::swap(index_, other->index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponEquipInfo::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponEquipInfo

// int32 id = 1;
void WeaponEquipInfo::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 WeaponEquipInfo::id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponEquipInfo.id)
  return id_;
}
void WeaponEquipInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.WeaponEquipInfo.id)
}

// int32 index = 2;
void WeaponEquipInfo::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 WeaponEquipInfo::index() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponEquipInfo.index)
  return index_;
}
void WeaponEquipInfo::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.WeaponEquipInfo.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponEquipReq::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponEquipReq::WeaponEquipReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.WeaponEquipReq)
}
WeaponEquipReq::WeaponEquipReq(const WeaponEquipReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      infos_(from.infos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.WeaponEquipReq)
}

void WeaponEquipReq::SharedCtor() {
  _cached_size_ = 0;
}

WeaponEquipReq::~WeaponEquipReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.WeaponEquipReq)
  SharedDtor();
}

void WeaponEquipReq::SharedDtor() {
}

void WeaponEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponEquipReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeaponEquipReq& WeaponEquipReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponEquipReq* WeaponEquipReq::New(::google::protobuf::Arena* arena) const {
  WeaponEquipReq* n = new WeaponEquipReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponEquipReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.WeaponEquipReq)
  infos_.Clear();
}

bool WeaponEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.WeaponEquipReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .battlespheresproto.WeaponEquipInfo infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.WeaponEquipReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.WeaponEquipReq)
  return false;
#undef DO_
}

void WeaponEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.WeaponEquipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battlespheresproto.WeaponEquipInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.WeaponEquipReq)
}

::google::protobuf::uint8* WeaponEquipReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.WeaponEquipReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .battlespheresproto.WeaponEquipInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->infos(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.WeaponEquipReq)
  return target;
}

size_t WeaponEquipReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.WeaponEquipReq)
  size_t total_size = 0;

  // repeated .battlespheresproto.WeaponEquipInfo infos = 1;
  {
    unsigned int count = this->infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.WeaponEquipReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponEquipReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponEquipReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.WeaponEquipReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.WeaponEquipReq)
    MergeFrom(*source);
  }
}

void WeaponEquipReq::MergeFrom(const WeaponEquipReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.WeaponEquipReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void WeaponEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.WeaponEquipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponEquipReq::CopyFrom(const WeaponEquipReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.WeaponEquipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponEquipReq::IsInitialized() const {
  return true;
}

void WeaponEquipReq::Swap(WeaponEquipReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponEquipReq::InternalSwap(WeaponEquipReq* other) {
  infos_.InternalSwap(&other->infos_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponEquipReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponEquipReq

// repeated .battlespheresproto.WeaponEquipInfo infos = 1;
int WeaponEquipReq::infos_size() const {
  return infos_.size();
}
void WeaponEquipReq::clear_infos() {
  infos_.Clear();
}
const ::battlespheresproto::WeaponEquipInfo& WeaponEquipReq::infos(int index) const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponEquipReq.infos)
  return infos_.Get(index);
}
::battlespheresproto::WeaponEquipInfo* WeaponEquipReq::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:battlespheresproto.WeaponEquipReq.infos)
  return infos_.Mutable(index);
}
::battlespheresproto::WeaponEquipInfo* WeaponEquipReq::add_infos() {
  // @@protoc_insertion_point(field_add:battlespheresproto.WeaponEquipReq.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponEquipInfo >*
WeaponEquipReq::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:battlespheresproto.WeaponEquipReq.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::battlespheresproto::WeaponEquipInfo >&
WeaponEquipReq::infos() const {
  // @@protoc_insertion_point(field_list:battlespheresproto.WeaponEquipReq.infos)
  return infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponEquipRsp::kResultFieldNumber;
const int WeaponEquipRsp::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponEquipRsp::WeaponEquipRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.WeaponEquipRsp)
}
WeaponEquipRsp::WeaponEquipRsp(const WeaponEquipRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::battlespheresproto::UserInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.WeaponEquipRsp)
}

void WeaponEquipRsp::SharedCtor() {
  ::memset(&info_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&info_) + sizeof(result_));
  _cached_size_ = 0;
}

WeaponEquipRsp::~WeaponEquipRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.WeaponEquipRsp)
  SharedDtor();
}

void WeaponEquipRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void WeaponEquipRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponEquipRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeaponEquipRsp& WeaponEquipRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponEquipRsp* WeaponEquipRsp::New(::google::protobuf::Arena* arena) const {
  WeaponEquipRsp* n = new WeaponEquipRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponEquipRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.WeaponEquipRsp)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  result_ = 0;
}

bool WeaponEquipRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.WeaponEquipRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .battlespheresproto.UserInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.WeaponEquipRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.WeaponEquipRsp)
  return false;
#undef DO_
}

void WeaponEquipRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.WeaponEquipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.WeaponEquipRsp)
}

::google::protobuf::uint8* WeaponEquipRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.WeaponEquipRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.WeaponEquipRsp)
  return target;
}

size_t WeaponEquipRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.WeaponEquipRsp)
  size_t total_size = 0;

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponEquipRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.WeaponEquipRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponEquipRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponEquipRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.WeaponEquipRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.WeaponEquipRsp)
    MergeFrom(*source);
  }
}

void WeaponEquipRsp::MergeFrom(const WeaponEquipRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.WeaponEquipRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::battlespheresproto::UserInfo::MergeFrom(from.info());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void WeaponEquipRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.WeaponEquipRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponEquipRsp::CopyFrom(const WeaponEquipRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.WeaponEquipRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponEquipRsp::IsInitialized() const {
  return true;
}

void WeaponEquipRsp::Swap(WeaponEquipRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponEquipRsp::InternalSwap(WeaponEquipRsp* other) {
  std::swap(info_, other->info_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponEquipRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponEquipRsp

// int32 result = 1;
void WeaponEquipRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 WeaponEquipRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponEquipRsp.result)
  return result_;
}
void WeaponEquipRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.WeaponEquipRsp.result)
}

// .battlespheresproto.UserInfo info = 2;
bool WeaponEquipRsp::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void WeaponEquipRsp::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::battlespheresproto::UserInfo& WeaponEquipRsp::info() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.WeaponEquipRsp.info)
  return info_ != NULL ? *info_
                         : *::battlespheresproto::UserInfo::internal_default_instance();
}
::battlespheresproto::UserInfo* WeaponEquipRsp::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::battlespheresproto::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:battlespheresproto.WeaponEquipRsp.info)
  return info_;
}
::battlespheresproto::UserInfo* WeaponEquipRsp::release_info() {
  // @@protoc_insertion_point(field_release:battlespheresproto.WeaponEquipRsp.info)
  
  ::battlespheresproto::UserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void WeaponEquipRsp::set_allocated_info(::battlespheresproto::UserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.WeaponEquipRsp.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkillUpgradeReq::kSkillIdFieldNumber;
const int SkillUpgradeReq::kNextLvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkillUpgradeReq::SkillUpgradeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.SkillUpgradeReq)
}
SkillUpgradeReq::SkillUpgradeReq(const SkillUpgradeReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skillid_, &from.skillid_,
    reinterpret_cast<char*>(&next_lv_) -
    reinterpret_cast<char*>(&skillid_) + sizeof(next_lv_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.SkillUpgradeReq)
}

void SkillUpgradeReq::SharedCtor() {
  ::memset(&skillid_, 0, reinterpret_cast<char*>(&next_lv_) -
    reinterpret_cast<char*>(&skillid_) + sizeof(next_lv_));
  _cached_size_ = 0;
}

SkillUpgradeReq::~SkillUpgradeReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.SkillUpgradeReq)
  SharedDtor();
}

void SkillUpgradeReq::SharedDtor() {
}

void SkillUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillUpgradeReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SkillUpgradeReq& SkillUpgradeReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

SkillUpgradeReq* SkillUpgradeReq::New(::google::protobuf::Arena* arena) const {
  SkillUpgradeReq* n = new SkillUpgradeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkillUpgradeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.SkillUpgradeReq)
  ::memset(&skillid_, 0, reinterpret_cast<char*>(&next_lv_) -
    reinterpret_cast<char*>(&skillid_) + sizeof(next_lv_));
}

bool SkillUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.SkillUpgradeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 skillId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 next_lv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_lv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.SkillUpgradeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.SkillUpgradeReq)
  return false;
#undef DO_
}

void SkillUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.SkillUpgradeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillId = 1;
  if (this->skillid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // int32 next_lv = 2;
  if (this->next_lv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->next_lv(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.SkillUpgradeReq)
}

::google::protobuf::uint8* SkillUpgradeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.SkillUpgradeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillId = 1;
  if (this->skillid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // int32 next_lv = 2;
  if (this->next_lv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->next_lv(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.SkillUpgradeReq)
  return target;
}

size_t SkillUpgradeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.SkillUpgradeReq)
  size_t total_size = 0;

  // int32 skillId = 1;
  if (this->skillid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skillid());
  }

  // int32 next_lv = 2;
  if (this->next_lv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->next_lv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.SkillUpgradeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillUpgradeReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SkillUpgradeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.SkillUpgradeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.SkillUpgradeReq)
    MergeFrom(*source);
  }
}

void SkillUpgradeReq::MergeFrom(const SkillUpgradeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.SkillUpgradeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skillid() != 0) {
    set_skillid(from.skillid());
  }
  if (from.next_lv() != 0) {
    set_next_lv(from.next_lv());
  }
}

void SkillUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.SkillUpgradeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillUpgradeReq::CopyFrom(const SkillUpgradeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.SkillUpgradeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillUpgradeReq::IsInitialized() const {
  return true;
}

void SkillUpgradeReq::Swap(SkillUpgradeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkillUpgradeReq::InternalSwap(SkillUpgradeReq* other) {
  std::swap(skillid_, other->skillid_);
  std::swap(next_lv_, other->next_lv_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkillUpgradeReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkillUpgradeReq

// int32 skillId = 1;
void SkillUpgradeReq::clear_skillid() {
  skillid_ = 0;
}
::google::protobuf::int32 SkillUpgradeReq::skillid() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.SkillUpgradeReq.skillId)
  return skillid_;
}
void SkillUpgradeReq::set_skillid(::google::protobuf::int32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.SkillUpgradeReq.skillId)
}

// int32 next_lv = 2;
void SkillUpgradeReq::clear_next_lv() {
  next_lv_ = 0;
}
::google::protobuf::int32 SkillUpgradeReq::next_lv() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.SkillUpgradeReq.next_lv)
  return next_lv_;
}
void SkillUpgradeReq::set_next_lv(::google::protobuf::int32 value) {
  
  next_lv_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.SkillUpgradeReq.next_lv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SkillUpgradeRsp::kResultFieldNumber;
const int SkillUpgradeRsp::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SkillUpgradeRsp::SkillUpgradeRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.SkillUpgradeRsp)
}
SkillUpgradeRsp::SkillUpgradeRsp(const SkillUpgradeRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::battlespheresproto::UserInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.SkillUpgradeRsp)
}

void SkillUpgradeRsp::SharedCtor() {
  ::memset(&info_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&info_) + sizeof(result_));
  _cached_size_ = 0;
}

SkillUpgradeRsp::~SkillUpgradeRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.SkillUpgradeRsp)
  SharedDtor();
}

void SkillUpgradeRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void SkillUpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillUpgradeRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SkillUpgradeRsp& SkillUpgradeRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

SkillUpgradeRsp* SkillUpgradeRsp::New(::google::protobuf::Arena* arena) const {
  SkillUpgradeRsp* n = new SkillUpgradeRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkillUpgradeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.SkillUpgradeRsp)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  result_ = 0;
}

bool SkillUpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.SkillUpgradeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .battlespheresproto.UserInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.SkillUpgradeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.SkillUpgradeRsp)
  return false;
#undef DO_
}

void SkillUpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.SkillUpgradeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.SkillUpgradeRsp)
}

::google::protobuf::uint8* SkillUpgradeRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.SkillUpgradeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.SkillUpgradeRsp)
  return target;
}

size_t SkillUpgradeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.SkillUpgradeRsp)
  size_t total_size = 0;

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillUpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.SkillUpgradeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SkillUpgradeRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SkillUpgradeRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.SkillUpgradeRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.SkillUpgradeRsp)
    MergeFrom(*source);
  }
}

void SkillUpgradeRsp::MergeFrom(const SkillUpgradeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.SkillUpgradeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::battlespheresproto::UserInfo::MergeFrom(from.info());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void SkillUpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.SkillUpgradeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillUpgradeRsp::CopyFrom(const SkillUpgradeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.SkillUpgradeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillUpgradeRsp::IsInitialized() const {
  return true;
}

void SkillUpgradeRsp::Swap(SkillUpgradeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkillUpgradeRsp::InternalSwap(SkillUpgradeRsp* other) {
  std::swap(info_, other->info_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkillUpgradeRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkillUpgradeRsp

// int32 result = 1;
void SkillUpgradeRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 SkillUpgradeRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.SkillUpgradeRsp.result)
  return result_;
}
void SkillUpgradeRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.SkillUpgradeRsp.result)
}

// .battlespheresproto.UserInfo info = 2;
bool SkillUpgradeRsp::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void SkillUpgradeRsp::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::battlespheresproto::UserInfo& SkillUpgradeRsp::info() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.SkillUpgradeRsp.info)
  return info_ != NULL ? *info_
                         : *::battlespheresproto::UserInfo::internal_default_instance();
}
::battlespheresproto::UserInfo* SkillUpgradeRsp::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::battlespheresproto::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:battlespheresproto.SkillUpgradeRsp.info)
  return info_;
}
::battlespheresproto::UserInfo* SkillUpgradeRsp::release_info() {
  // @@protoc_insertion_point(field_release:battlespheresproto.SkillUpgradeRsp.info)
  
  ::battlespheresproto::UserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void SkillUpgradeRsp::set_allocated_info(::battlespheresproto::UserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.SkillUpgradeRsp.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindFBReq::kFbIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindFBReq::FindFBReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.FindFBReq)
}
FindFBReq::FindFBReq(const FindFBReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fb_id_ = from.fb_id_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.FindFBReq)
}

void FindFBReq::SharedCtor() {
  fb_id_ = 0u;
  _cached_size_ = 0;
}

FindFBReq::~FindFBReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.FindFBReq)
  SharedDtor();
}

void FindFBReq::SharedDtor() {
}

void FindFBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindFBReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FindFBReq& FindFBReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

FindFBReq* FindFBReq::New(::google::protobuf::Arena* arena) const {
  FindFBReq* n = new FindFBReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindFBReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.FindFBReq)
  fb_id_ = 0u;
}

bool FindFBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.FindFBReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fb_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fb_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.FindFBReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.FindFBReq)
  return false;
#undef DO_
}

void FindFBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.FindFBReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fb_id = 1;
  if (this->fb_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fb_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.FindFBReq)
}

::google::protobuf::uint8* FindFBReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.FindFBReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fb_id = 1;
  if (this->fb_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fb_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.FindFBReq)
  return target;
}

size_t FindFBReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.FindFBReq)
  size_t total_size = 0;

  // uint32 fb_id = 1;
  if (this->fb_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fb_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindFBReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.FindFBReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FindFBReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindFBReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.FindFBReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.FindFBReq)
    MergeFrom(*source);
  }
}

void FindFBReq::MergeFrom(const FindFBReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.FindFBReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fb_id() != 0) {
    set_fb_id(from.fb_id());
  }
}

void FindFBReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.FindFBReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindFBReq::CopyFrom(const FindFBReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.FindFBReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindFBReq::IsInitialized() const {
  return true;
}

void FindFBReq::Swap(FindFBReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindFBReq::InternalSwap(FindFBReq* other) {
  std::swap(fb_id_, other->fb_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindFBReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindFBReq

// uint32 fb_id = 1;
void FindFBReq::clear_fb_id() {
  fb_id_ = 0u;
}
::google::protobuf::uint32 FindFBReq::fb_id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.FindFBReq.fb_id)
  return fb_id_;
}
void FindFBReq::set_fb_id(::google::protobuf::uint32 value) {
  
  fb_id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.FindFBReq.fb_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindFBRsp::kResultFieldNumber;
const int FindFBRsp::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindFBRsp::FindFBRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.FindFBRsp)
}
FindFBRsp::FindFBRsp(const FindFBRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::battlespheresproto::RoomPlayerInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.FindFBRsp)
}

void FindFBRsp::SharedCtor() {
  ::memset(&info_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&info_) + sizeof(result_));
  _cached_size_ = 0;
}

FindFBRsp::~FindFBRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.FindFBRsp)
  SharedDtor();
}

void FindFBRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void FindFBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindFBRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FindFBRsp& FindFBRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

FindFBRsp* FindFBRsp::New(::google::protobuf::Arena* arena) const {
  FindFBRsp* n = new FindFBRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindFBRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.FindFBRsp)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  result_ = 0;
}

bool FindFBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.FindFBRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .battlespheresproto.RoomPlayerInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.FindFBRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.FindFBRsp)
  return false;
#undef DO_
}

void FindFBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.FindFBRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .battlespheresproto.RoomPlayerInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.FindFBRsp)
}

::google::protobuf::uint8* FindFBRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.FindFBRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .battlespheresproto.RoomPlayerInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.FindFBRsp)
  return target;
}

size_t FindFBRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.FindFBRsp)
  size_t total_size = 0;

  // .battlespheresproto.RoomPlayerInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindFBRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.FindFBRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const FindFBRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindFBRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.FindFBRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.FindFBRsp)
    MergeFrom(*source);
  }
}

void FindFBRsp::MergeFrom(const FindFBRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.FindFBRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::battlespheresproto::RoomPlayerInfo::MergeFrom(from.info());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void FindFBRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.FindFBRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindFBRsp::CopyFrom(const FindFBRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.FindFBRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindFBRsp::IsInitialized() const {
  return true;
}

void FindFBRsp::Swap(FindFBRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindFBRsp::InternalSwap(FindFBRsp* other) {
  std::swap(info_, other->info_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindFBRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindFBRsp

// int32 result = 1;
void FindFBRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 FindFBRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.FindFBRsp.result)
  return result_;
}
void FindFBRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.FindFBRsp.result)
}

// .battlespheresproto.RoomPlayerInfo info = 2;
bool FindFBRsp::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void FindFBRsp::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::battlespheresproto::RoomPlayerInfo& FindFBRsp::info() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.FindFBRsp.info)
  return info_ != NULL ? *info_
                         : *::battlespheresproto::RoomPlayerInfo::internal_default_instance();
}
::battlespheresproto::RoomPlayerInfo* FindFBRsp::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::battlespheresproto::RoomPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:battlespheresproto.FindFBRsp.info)
  return info_;
}
::battlespheresproto::RoomPlayerInfo* FindFBRsp::release_info() {
  // @@protoc_insertion_point(field_release:battlespheresproto.FindFBRsp.info)
  
  ::battlespheresproto::RoomPlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void FindFBRsp::set_allocated_info(::battlespheresproto::RoomPlayerInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.FindFBRsp.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvitationReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvitationReq::InvitationReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.InvitationReq)
}
InvitationReq::InvitationReq(const InvitationReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.InvitationReq)
}

void InvitationReq::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

InvitationReq::~InvitationReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.InvitationReq)
  SharedDtor();
}

void InvitationReq::SharedDtor() {
}

void InvitationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InvitationReq& InvitationReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

InvitationReq* InvitationReq::New(::google::protobuf::Arena* arena) const {
  InvitationReq* n = new InvitationReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InvitationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.InvitationReq)
  id_ = 0u;
}

bool InvitationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.InvitationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.InvitationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.InvitationReq)
  return false;
#undef DO_
}

void InvitationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.InvitationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.InvitationReq)
}

::google::protobuf::uint8* InvitationReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.InvitationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.InvitationReq)
  return target;
}

size_t InvitationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.InvitationReq)
  size_t total_size = 0;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.InvitationReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InvitationReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.InvitationReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.InvitationReq)
    MergeFrom(*source);
  }
}

void InvitationReq::MergeFrom(const InvitationReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.InvitationReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void InvitationReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.InvitationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationReq::CopyFrom(const InvitationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.InvitationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationReq::IsInitialized() const {
  return true;
}

void InvitationReq::Swap(InvitationReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvitationReq::InternalSwap(InvitationReq* other) {
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InvitationReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InvitationReq

// uint32 id = 1;
void InvitationReq::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 InvitationReq::id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.InvitationReq.id)
  return id_;
}
void InvitationReq::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.InvitationReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvitationRsp::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvitationRsp::InvitationRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.InvitationRsp)
}
InvitationRsp::InvitationRsp(const InvitationRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::battlespheresproto::RoomPlayerInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.InvitationRsp)
}

void InvitationRsp::SharedCtor() {
  info_ = NULL;
  _cached_size_ = 0;
}

InvitationRsp::~InvitationRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.InvitationRsp)
  SharedDtor();
}

void InvitationRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void InvitationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InvitationRsp& InvitationRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

InvitationRsp* InvitationRsp::New(::google::protobuf::Arena* arena) const {
  InvitationRsp* n = new InvitationRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InvitationRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.InvitationRsp)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}

bool InvitationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.InvitationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .battlespheresproto.RoomPlayerInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.InvitationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.InvitationRsp)
  return false;
#undef DO_
}

void InvitationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.InvitationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .battlespheresproto.RoomPlayerInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.InvitationRsp)
}

::google::protobuf::uint8* InvitationRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.InvitationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .battlespheresproto.RoomPlayerInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.InvitationRsp)
  return target;
}

size_t InvitationRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.InvitationRsp)
  size_t total_size = 0;

  // .battlespheresproto.RoomPlayerInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.InvitationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InvitationRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.InvitationRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.InvitationRsp)
    MergeFrom(*source);
  }
}

void InvitationRsp::MergeFrom(const InvitationRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.InvitationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::battlespheresproto::RoomPlayerInfo::MergeFrom(from.info());
  }
}

void InvitationRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.InvitationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationRsp::CopyFrom(const InvitationRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.InvitationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationRsp::IsInitialized() const {
  return true;
}

void InvitationRsp::Swap(InvitationRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvitationRsp::InternalSwap(InvitationRsp* other) {
  std::swap(info_, other->info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InvitationRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InvitationRsp

// .battlespheresproto.RoomPlayerInfo info = 1;
bool InvitationRsp::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void InvitationRsp::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::battlespheresproto::RoomPlayerInfo& InvitationRsp::info() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.InvitationRsp.info)
  return info_ != NULL ? *info_
                         : *::battlespheresproto::RoomPlayerInfo::internal_default_instance();
}
::battlespheresproto::RoomPlayerInfo* InvitationRsp::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::battlespheresproto::RoomPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:battlespheresproto.InvitationRsp.info)
  return info_;
}
::battlespheresproto::RoomPlayerInfo* InvitationRsp::release_info() {
  // @@protoc_insertion_point(field_release:battlespheresproto.InvitationRsp.info)
  
  ::battlespheresproto::RoomPlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void InvitationRsp::set_allocated_info(::battlespheresproto::RoomPlayerInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.InvitationRsp.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvitationAnswerReq::kResultFieldNumber;
const int InvitationAnswerReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvitationAnswerReq::InvitationAnswerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.InvitationAnswerReq)
}
InvitationAnswerReq::InvitationAnswerReq(const InvitationAnswerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&result_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.InvitationAnswerReq)
}

void InvitationAnswerReq::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&result_) + sizeof(id_));
  _cached_size_ = 0;
}

InvitationAnswerReq::~InvitationAnswerReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.InvitationAnswerReq)
  SharedDtor();
}

void InvitationAnswerReq::SharedDtor() {
}

void InvitationAnswerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationAnswerReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InvitationAnswerReq& InvitationAnswerReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

InvitationAnswerReq* InvitationAnswerReq::New(::google::protobuf::Arena* arena) const {
  InvitationAnswerReq* n = new InvitationAnswerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InvitationAnswerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.InvitationAnswerReq)
  ::memset(&result_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&result_) + sizeof(id_));
}

bool InvitationAnswerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.InvitationAnswerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.InvitationAnswerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.InvitationAnswerReq)
  return false;
#undef DO_
}

void InvitationAnswerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.InvitationAnswerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.InvitationAnswerReq)
}

::google::protobuf::uint8* InvitationAnswerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.InvitationAnswerReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.InvitationAnswerReq)
  return target;
}

size_t InvitationAnswerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.InvitationAnswerReq)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationAnswerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.InvitationAnswerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationAnswerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InvitationAnswerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.InvitationAnswerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.InvitationAnswerReq)
    MergeFrom(*source);
  }
}

void InvitationAnswerReq::MergeFrom(const InvitationAnswerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.InvitationAnswerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void InvitationAnswerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.InvitationAnswerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationAnswerReq::CopyFrom(const InvitationAnswerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.InvitationAnswerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationAnswerReq::IsInitialized() const {
  return true;
}

void InvitationAnswerReq::Swap(InvitationAnswerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvitationAnswerReq::InternalSwap(InvitationAnswerReq* other) {
  std::swap(result_, other->result_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InvitationAnswerReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InvitationAnswerReq

// int32 result = 1;
void InvitationAnswerReq::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 InvitationAnswerReq::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.InvitationAnswerReq.result)
  return result_;
}
void InvitationAnswerReq::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.InvitationAnswerReq.result)
}

// uint32 id = 2;
void InvitationAnswerReq::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 InvitationAnswerReq::id() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.InvitationAnswerReq.id)
  return id_;
}
void InvitationAnswerReq::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.InvitationAnswerReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvitationAnswerRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvitationAnswerRsp::InvitationAnswerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.InvitationAnswerRsp)
}
InvitationAnswerRsp::InvitationAnswerRsp(const InvitationAnswerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.InvitationAnswerRsp)
}

void InvitationAnswerRsp::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

InvitationAnswerRsp::~InvitationAnswerRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.InvitationAnswerRsp)
  SharedDtor();
}

void InvitationAnswerRsp::SharedDtor() {
}

void InvitationAnswerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationAnswerRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InvitationAnswerRsp& InvitationAnswerRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

InvitationAnswerRsp* InvitationAnswerRsp::New(::google::protobuf::Arena* arena) const {
  InvitationAnswerRsp* n = new InvitationAnswerRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InvitationAnswerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.InvitationAnswerRsp)
  result_ = 0;
}

bool InvitationAnswerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.InvitationAnswerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.InvitationAnswerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.InvitationAnswerRsp)
  return false;
#undef DO_
}

void InvitationAnswerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.InvitationAnswerRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.InvitationAnswerRsp)
}

::google::protobuf::uint8* InvitationAnswerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.InvitationAnswerRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.InvitationAnswerRsp)
  return target;
}

size_t InvitationAnswerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.InvitationAnswerRsp)
  size_t total_size = 0;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationAnswerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.InvitationAnswerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const InvitationAnswerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InvitationAnswerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.InvitationAnswerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.InvitationAnswerRsp)
    MergeFrom(*source);
  }
}

void InvitationAnswerRsp::MergeFrom(const InvitationAnswerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.InvitationAnswerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void InvitationAnswerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.InvitationAnswerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationAnswerRsp::CopyFrom(const InvitationAnswerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.InvitationAnswerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationAnswerRsp::IsInitialized() const {
  return true;
}

void InvitationAnswerRsp::Swap(InvitationAnswerRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvitationAnswerRsp::InternalSwap(InvitationAnswerRsp* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InvitationAnswerRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InvitationAnswerRsp

// int32 result = 1;
void InvitationAnswerRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 InvitationAnswerRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.InvitationAnswerRsp.result)
  return result_;
}
void InvitationAnswerRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.InvitationAnswerRsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleResultReq::kKillCountFieldNumber;
const int BattleResultReq::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleResultReq::BattleResultReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.BattleResultReq)
}
BattleResultReq::BattleResultReq(const BattleResultReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&killcount_, &from.killcount_,
    reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&killcount_) + sizeof(points_));
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.BattleResultReq)
}

void BattleResultReq::SharedCtor() {
  ::memset(&killcount_, 0, reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&killcount_) + sizeof(points_));
  _cached_size_ = 0;
}

BattleResultReq::~BattleResultReq() {
  // @@protoc_insertion_point(destructor:battlespheresproto.BattleResultReq)
  SharedDtor();
}

void BattleResultReq::SharedDtor() {
}

void BattleResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleResultReq::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattleResultReq& BattleResultReq::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattleResultReq* BattleResultReq::New(::google::protobuf::Arena* arena) const {
  BattleResultReq* n = new BattleResultReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattleResultReq::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.BattleResultReq)
  ::memset(&killcount_, 0, reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&killcount_) + sizeof(points_));
}

bool BattleResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.BattleResultReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 killCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.BattleResultReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.BattleResultReq)
  return false;
#undef DO_
}

void BattleResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.BattleResultReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 killCount = 1;
  if (this->killcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->killcount(), output);
  }

  // int32 points = 2;
  if (this->points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.BattleResultReq)
}

::google::protobuf::uint8* BattleResultReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.BattleResultReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 killCount = 1;
  if (this->killcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->killcount(), target);
  }

  // int32 points = 2;
  if (this->points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.BattleResultReq)
  return target;
}

size_t BattleResultReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.BattleResultReq)
  size_t total_size = 0;

  // int32 killCount = 1;
  if (this->killcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->killcount());
  }

  // int32 points = 2;
  if (this->points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleResultReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.BattleResultReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleResultReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleResultReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.BattleResultReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.BattleResultReq)
    MergeFrom(*source);
  }
}

void BattleResultReq::MergeFrom(const BattleResultReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.BattleResultReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.killcount() != 0) {
    set_killcount(from.killcount());
  }
  if (from.points() != 0) {
    set_points(from.points());
  }
}

void BattleResultReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.BattleResultReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleResultReq::CopyFrom(const BattleResultReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.BattleResultReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResultReq::IsInitialized() const {
  return true;
}

void BattleResultReq::Swap(BattleResultReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleResultReq::InternalSwap(BattleResultReq* other) {
  std::swap(killcount_, other->killcount_);
  std::swap(points_, other->points_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattleResultReq::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattleResultReq

// int32 killCount = 1;
void BattleResultReq::clear_killcount() {
  killcount_ = 0;
}
::google::protobuf::int32 BattleResultReq::killcount() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.BattleResultReq.killCount)
  return killcount_;
}
void BattleResultReq::set_killcount(::google::protobuf::int32 value) {
  
  killcount_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.BattleResultReq.killCount)
}

// int32 points = 2;
void BattleResultReq::clear_points() {
  points_ = 0;
}
::google::protobuf::int32 BattleResultReq::points() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.BattleResultReq.points)
  return points_;
}
void BattleResultReq::set_points(::google::protobuf::int32 value) {
  
  points_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.BattleResultReq.points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleResultRsp::kResultFieldNumber;
const int BattleResultRsp::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleResultRsp::BattleResultRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_battlespheres_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:battlespheresproto.BattleResultRsp)
}
BattleResultRsp::BattleResultRsp(const BattleResultRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::battlespheresproto::UserInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:battlespheresproto.BattleResultRsp)
}

void BattleResultRsp::SharedCtor() {
  ::memset(&info_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&info_) + sizeof(result_));
  _cached_size_ = 0;
}

BattleResultRsp::~BattleResultRsp() {
  // @@protoc_insertion_point(destructor:battlespheresproto.BattleResultRsp)
  SharedDtor();
}

void BattleResultRsp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void BattleResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleResultRsp::descriptor() {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattleResultRsp& BattleResultRsp::default_instance() {
  protobuf_battlespheres_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattleResultRsp* BattleResultRsp::New(::google::protobuf::Arena* arena) const {
  BattleResultRsp* n = new BattleResultRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattleResultRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:battlespheresproto.BattleResultRsp)
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  result_ = 0;
}

bool BattleResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:battlespheresproto.BattleResultRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .battlespheresproto.UserInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:battlespheresproto.BattleResultRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:battlespheresproto.BattleResultRsp)
  return false;
#undef DO_
}

void BattleResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:battlespheresproto.BattleResultRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:battlespheresproto.BattleResultRsp)
}

::google::protobuf::uint8* BattleResultRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:battlespheresproto.BattleResultRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:battlespheresproto.BattleResultRsp)
  return target;
}

size_t BattleResultRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:battlespheresproto.BattleResultRsp)
  size_t total_size = 0;

  // .battlespheresproto.UserInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:battlespheresproto.BattleResultRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleResultRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleResultRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:battlespheresproto.BattleResultRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:battlespheresproto.BattleResultRsp)
    MergeFrom(*source);
  }
}

void BattleResultRsp::MergeFrom(const BattleResultRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:battlespheresproto.BattleResultRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::battlespheresproto::UserInfo::MergeFrom(from.info());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void BattleResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:battlespheresproto.BattleResultRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleResultRsp::CopyFrom(const BattleResultRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:battlespheresproto.BattleResultRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResultRsp::IsInitialized() const {
  return true;
}

void BattleResultRsp::Swap(BattleResultRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleResultRsp::InternalSwap(BattleResultRsp* other) {
  std::swap(info_, other->info_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattleResultRsp::GetMetadata() const {
  protobuf_battlespheres_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_battlespheres_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattleResultRsp

// int32 result = 1;
void BattleResultRsp::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 BattleResultRsp::result() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.BattleResultRsp.result)
  return result_;
}
void BattleResultRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:battlespheresproto.BattleResultRsp.result)
}

// .battlespheresproto.UserInfo info = 2;
bool BattleResultRsp::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void BattleResultRsp::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::battlespheresproto::UserInfo& BattleResultRsp::info() const {
  // @@protoc_insertion_point(field_get:battlespheresproto.BattleResultRsp.info)
  return info_ != NULL ? *info_
                         : *::battlespheresproto::UserInfo::internal_default_instance();
}
::battlespheresproto::UserInfo* BattleResultRsp::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::battlespheresproto::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:battlespheresproto.BattleResultRsp.info)
  return info_;
}
::battlespheresproto::UserInfo* BattleResultRsp::release_info() {
  // @@protoc_insertion_point(field_release:battlespheresproto.BattleResultRsp.info)
  
  ::battlespheresproto::UserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void BattleResultRsp::set_allocated_info(::battlespheresproto::UserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:battlespheresproto.BattleResultRsp.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace battlespheresproto

// @@protoc_insertion_point(global_scope)
